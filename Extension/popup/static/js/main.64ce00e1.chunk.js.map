{"version":3,"sources":["pages/Home.tsx","pages/Settings.tsx","services/Storage.ts","services/UserAgentService.ts","pages/UserAgents.tsx","pages/UserAgentsForm.tsx","services/TextService.ts","pages/Texts.tsx","pages/TextsForm.tsx","global/App.tsx","index.tsx"],"names":["Home","chrome","tabs","query","active","currentWindow","sendMessage","id","function","func","selector","attribute","className","onClick","this","toggleGridOverlay","toggleOutlines","React","Component","Settings","to","storage","window","localStorage","set","key","value","Promise","resolve","reject","setItem","JSON","stringify","err","get","item","getItem","parse","undefined","UserAgentService","storageKey","userAgents","length","find","userAgent","Math","max","map","parseInt","push","toString","name","width","height","save","index","indexOf","splice","UserAgents","state","load","setState","text","delete","deleteText","UserAgentsForm","props","handleSubmit","bind","handleChange","params","match","event","target","create","update","preventDefault","history","onSubmit","htmlFor","type","onChange","TextService","texts","content","Texts","TextsForm","App","path","component","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.64ce00e1.chunk.js","sourcesContent":["/*global chrome*/\n\nimport React from 'react'\n\nexport default class Home extends React.Component {\n\n  toggleGridOverlay() {\n    // @ts-ignore\n    chrome.tabs.query({\n        active: true,\n        currentWindow: true,\n      // @ts-ignore\n      }, (tabs) => {\n      // @ts-ignore\n        chrome.tabs.sendMessage(tabs[0].id, {\n          function: 'toggleGridOverlay',\n        })\n      },\n    )\n  }\n\n  toggleOutlines(func: string, selector: string, attribute: string) {\n    // @ts-ignore\n    chrome.tabs.query({\n        active: true,\n        currentWindow: true,\n        // @ts-ignore\n      }, (tabs) => {\n        // @ts-ignore\n        chrome.tabs.sendMessage(tabs[0].id, {\n          function: func,\n          selector: selector,\n          attribute: attribute,\n        })\n      },\n    )\n  }\n\n  render() {\n    return (\n      <>\n        <section>\n          <h2 className=\"title\">Tools</h2>\n          <ul>\n            <li>\n              Grid Overlay\n              <div className=\"float-right\">\n                <button onClick={this.toggleGridOverlay}>Toggle</button>\n              </div>\n            </li>\n            <li>\n              Outline Headings\n              <div className=\"float-right\">\n                <button onClick={() => this.toggleOutlines('outlineHeadings', '', '')}>Toggle</button>\n              </div>\n            </li>\n            <li>\n              Image Alternative Attributes\n              <div className=\"float-right\">\n                <button onClick={() => this.toggleOutlines('outlineElementAttribute', 'img', 'alt')}>Toggle</button>\n              </div>\n            </li>\n            <li>\n              Anchor Title Attributes\n              <div className=\"float-right\">\n                <button onClick={() => this.toggleOutlines('outlineElementAttribute', 'a', 'title')}>Toggle</button>\n              </div>\n            </li>\n            <li>\n              Button Title Attributes\n              <div className=\"float-right\">\n                <button onClick={() => this.toggleOutlines('outlineElementAttribute', 'button', 'title')}>Toggle</button>\n              </div>\n            </li>\n          </ul>\n        </section>\n      </>\n    )\n  }\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport default class Settings extends React.Component {\n\n  render() {\n    return (\n      <>\n        <h2>\n          Settings\n          <div className=\"float-right\">\n            <Link to=\"/\">\n              <button>←</button>\n            </Link>\n          </div>\n        </h2>\n        <section>\n          <h2 className=\"title\">User Agents</h2>\n          <p>Manage devices for simulating your web contents.</p>\n          <div className=\"float-right\">\n            <Link to=\"/settings/useragents\">\n              <button>Manage</button>\n            </Link>\n          </div>\n          <div className=\"clearfix\"/>\n        </section>\n        <section>\n          <h2 className=\"title\">Texts</h2>\n          <p>Manage dummy texts for inserting into input fields.</p>\n          <div className=\"float-right\">\n            <Link to=\"/settings/texts\">\n              <button>Manage</button>\n            </Link>\n          </div>\n          <div className=\"clearfix\"/>\n        </section>\n      </>\n    )\n  }\n}\n","const storage = window.localStorage;\n\nexport function set(key: string, value: any): Promise<void> {\n  return new Promise((resolve, reject) => {\n    try {\n      storage && storage.setItem(key, JSON.stringify(value))\n      resolve()\n    } catch (err) {\n      reject(`Couldn't store object ${err}`)\n    }\n  })\n}\n\nexport function remove(key: string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    try {\n      storage && storage.removeItem(key)\n      resolve()\n    } catch (err) {\n      reject(`Couldn't remove object ${err}`)\n    }\n  })\n}\n\nexport function get(key: string): Promise<any> {\n  return new Promise((resolve, reject) => {\n    try {\n      if (storage) {\n        const item = storage.getItem(key)\n        if (item != null) {\n          resolve(JSON.parse(item))\n        }\n      }\n      resolve(undefined)\n    } catch (err) {\n      reject(`Couldn't get object: ${err}`)\n    }\n  })\n}\n","import { set, get } from './Storage'\nimport { UserAgent } from '../interfaces/UserAgent'\n\nclass UserAgentServiceController {\n\n  private storageKey: string = 'userAgents'\n\n  public userAgents: UserAgent[] = []\n\n  async load(): Promise<UserAgent[]> {\n    if (this.userAgents.length > 0) {\n      return this.userAgents\n    } else {\n      this.userAgents = (await get(this.storageKey)) || []\n      return this.userAgents\n    }\n  }\n\n  async save(): Promise<void> {\n    return await set(this.storageKey, this.userAgents)\n  }\n\n  get(id: any): UserAgent {\n    return this.userAgents.find(userAgent => userAgent.id === id) as UserAgent\n  }\n\n  create(userAgent: UserAgent): void {\n    // Create a unique id that is one larger than the current largest id\n    let id = Math.max(...this.userAgents.map(userAgent => parseInt(userAgent.id)), 0) + 1\n    this.userAgents.push({\n      id: id.toString(),\n      name: userAgent.name,\n      userAgent: userAgent.userAgent,\n      width: userAgent.width,\n      height: userAgent.height\n    })\n    this.save()\n  }\n\n  update(id: any, userAgent: UserAgent): void {\n    // Get the index in the array of the userAgent that was passed in\n    let index = this.userAgents.indexOf(this.get(id))\n    this.userAgents[index] = userAgent\n    this.save()\n  }\n\n  delete(userAgent: UserAgent): void {\n    // Get the index in the array of the userAgent that was passed in\n    let index = this.userAgents.indexOf(userAgent)\n    // Delete that element of the array and resave the data\n    if (index > -1) {\n      this.userAgents.splice(index, 1)\n      this.save()\n    }\n  }\n}\n\nexport const UserAgentService = new UserAgentServiceController()\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport {UserAgent} from \"../interfaces/UserAgent\";\nimport {UserAgentService} from \"../services/UserAgentService\";\n\nexport default class UserAgents extends React.Component {\n\n  state = {\n    userAgents: []\n  }\n\n  async componentDidMount() {\n    this.setState({\n      userAgents: [...(await UserAgentService.load())]\n    })\n  }\n\n  async deleteText(userAgent: UserAgent) {\n    // @ts-ignore\n    let index = this.state.userAgents.indexOf(text)\n    if (index > -1) {\n      this.state.userAgents.splice(index, 1)\n    }\n    await UserAgentService.delete(userAgent)\n    this.setState({\n      userAgents: [...(await UserAgentService.load())]\n    })\n  }\n\n  render() {\n    return (\n      <>\n        <h2>\n          UserAgents\n          <div className=\"float-right\">\n            <Link to=\"/settings\">\n              <button>←</button>\n            </Link>\n            <Link to=\"/settings/useragents/add\">\n              <button>+</button>\n            </Link>\n          </div>\n          <div className=\"clearfix\"/>\n        </h2>\n        <ul className=\"scrollable\">\n          {this.state.userAgents.map((userAgent: UserAgent, index: number) => (\n            <li key={index}>\n              <span>{userAgent.name}</span>\n              <div className=\"float-right\">\n                <Link to={`/settings/useragents/show/${userAgent.id}`}>\n                  <button>Edit</button>\n                </Link>\n                <button onClick={() => this.deleteText(userAgent)}>Delete</button>\n              </div>\n              <div className=\"clearfix\"/>\n            </li>\n          ))}\n        </ul>\n      </>\n    )\n  }\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { UserAgent } from \"../interfaces/UserAgent\"\nimport { UserAgentService } from \"../services/UserAgentService\"\n\nexport default class UserAgentsForm extends React.Component {\n\n  state = {\n    id: undefined,\n    name: undefined,\n    userAgent: undefined,\n    width: undefined,\n    height: undefined\n  }\n\n  constructor(props: any) {\n    super(props)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  async componentDidMount() {\n    // @ts-ignore\n    const { match: { params } } = this.props\n    if (params.id) {\n      await UserAgentService.load()\n      this.setState({...await UserAgentService.get(params.id)})\n    }\n  }\n\n  handleChange(event: any) {\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n  }\n\n  handleSubmit(event: any) {\n    let userAgent = this.state as unknown as UserAgent\n    if (typeof userAgent.id === 'undefined') {\n      UserAgentService.create(userAgent)\n    } else {\n      UserAgentService.update(userAgent.id, userAgent)\n    }\n    event.preventDefault()\n    // @ts-ignore\n    this.props.history.push(\"/useragents\")\n  }\n\n  render() {\n    return (\n      <>\n        <h2>\n          UserAgent\n          <div className=\"float-right\">\n            <Link to=\"/settings/useragents\">\n              <button>←</button>\n            </Link>\n          </div>\n        </h2>\n        <form onSubmit={this.handleSubmit}>\n          <div>\n            <label htmlFor=\"name\">Name</label>\n            <input type=\"text\" id=\"name\" name=\"name\" value={this.state.name} onChange={this.handleChange}/>\n          </div>\n          <div>\n            <label htmlFor=\"content\">UserAgent</label>\n            <input type=\"text\" id=\"userAgent\" name=\"userAgent\" value={this.state.userAgent} onChange={this.handleChange}/>\n          </div>\n          <div>\n            <label htmlFor=\"name\">Name</label>\n            <input type=\"text\" id=\"name\" name=\"name\" value={this.state.name} onChange={this.handleChange}/>\n          </div>\n          <div>\n            <label htmlFor=\"name\">Width</label>\n            <input type=\"number\" id=\"width\" name=\"width\" value={this.state.width} onChange={this.handleChange}/>\n          </div>\n          <div>\n            <label htmlFor=\"name\">Height</label>\n            <input type=\"number\" id=\"height\" name=\"height\" value={this.state.height} onChange={this.handleChange}/>\n          </div>\n          <div className=\"float-right\">\n            <input type=\"submit\" value=\"Submit\" />\n          </div>\n        </form>\n      </>\n    )\n  }\n}\n","import { set, get } from './Storage'\nimport { Text } from '../interfaces/Text'\n\nclass TextServiceController {\n\n  private storageKey: string = 'texts'\n\n  public texts: Text[] = []\n\n  async load(): Promise<Text[]> {\n    if (this.texts.length > 0) {\n      return this.texts\n    } else {\n      this.texts = (await get(this.storageKey)) || []\n      return this.texts\n    }\n  }\n\n  async save(): Promise<void> {\n    return await set(this.storageKey, this.texts)\n  }\n\n  get(id: any): Text {\n    return this.texts.find(text => text.id === id) as Text\n  }\n\n  create(text: Text): void {\n    // Create a unique id that is one larger than the current largest id\n    let id = Math.max(...this.texts.map(text => parseInt(text.id)), 0) + 1\n    this.texts.push({\n      id: id.toString(),\n      name: text.name,\n      content: text.content\n    })\n    this.save()\n  }\n\n  update(id: any, text: Text): void {\n    // Get the index in the array of the text that was passed in\n    let index = this.texts.indexOf(this.get(id))\n    this.texts[index] = text\n    this.save()\n  }\n\n  delete(text: Text): void {\n    // Get the index in the array of the text that was passed in\n    let index = this.texts.indexOf(text)\n    // Delete that element of the array and resave the data\n    if (index > -1) {\n      this.texts.splice(index, 1)\n      this.save()\n    }\n  }\n}\n\nexport const TextService = new TextServiceController()\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Text } from \"../interfaces/Text\"\nimport { TextService } from \"../services/TextService\"\n\nexport default class Texts extends React.Component {\n\n  state = {\n    texts: []\n  }\n\n  async componentDidMount() {\n    this.setState({\n      texts: [...(await TextService.load())]\n    })\n  }\n\n  async deleteText(text: Text) {\n    // @ts-ignore\n    let index = this.state.texts.indexOf(text)\n    if (index > -1) {\n      this.state.texts.splice(index, 1)\n    }\n    await TextService.delete(text)\n    this.setState({\n      texts: [...(await TextService.load())]\n    })\n  }\n\n  render() {\n    return (\n      <>\n        <h2>\n          Texts\n          <div className=\"float-right\">\n            <Link to=\"/settings\">\n              <button>←</button>\n            </Link>\n            <Link to=\"/settings/texts/add\">\n              <button>+</button>\n            </Link>\n          </div>\n          <div className=\"clearfix\"/>\n        </h2>\n        <ul className=\"scrollable\">\n          {this.state.texts.map((text: Text, index: number) => (\n            <li key={index}>\n              <span>{text.name}</span>\n              <div className=\"float-right\">\n                <Link to={`/settings/texts/show/${text.id}`}>\n                  <button>Edit</button>\n                </Link>\n                <button onClick={() => this.deleteText(text)}>Delete</button>\n              </div>\n              <div className=\"clearfix\"/>\n            </li>\n          ))}\n        </ul>\n      </>\n    )\n  }\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Text } from \"../interfaces/Text\"\nimport { TextService } from \"../services/TextService\"\n\nexport default class TextsForm extends React.Component {\n\n  state = {\n    id: undefined,\n    name: undefined,\n    content: undefined\n  }\n\n  constructor(props: any) {\n    super(props)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  async componentDidMount() {\n    // @ts-ignore\n    const { match: { params } } = this.props\n    if (params.id) {\n      await TextService.load()\n      this.setState({...await TextService.get(params.id)})\n    }\n  }\n\n  handleChange(event: any) {\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n  }\n\n  handleSubmit(event: any) {\n    let text = this.state as unknown as Text\n    if (typeof text.id === 'undefined') {\n      TextService.create(text)\n    } else {\n      TextService.update(text.id, text)\n    }\n    event.preventDefault()\n    // @ts-ignore\n    this.props.history.push(\"/texts\")\n  }\n\n  render() {\n    return (\n      <>\n        <h2>\n          Text\n          <div className=\"float-right\">\n            <Link to=\"/settings/texts\">\n              <button>←</button>\n            </Link>\n          </div>\n        </h2>\n        <form onSubmit={this.handleSubmit}>\n          <div>\n            <label htmlFor=\"name\">Name</label>\n            <input type=\"text\" id=\"name\" name=\"name\" value={this.state.name} onChange={this.handleChange}/>\n          </div>\n          <div>\n            <label htmlFor=\"content\">Content</label>\n            <textarea id=\"content\" name=\"content\" value={this.state.content} onChange={this.handleChange}/>\n          </div>\n          <div className=\"float-right\">\n            <input type=\"submit\" value=\"Submit\" />\n          </div>\n        </form>\n      </>\n    )\n  }\n}\n","import React from 'react'\nimport { Link, MemoryRouter as Router, Route } from 'react-router-dom'\nimport './App.css'\nimport Home from '../pages/Home'\nimport Settings from '../pages/Settings'\nimport UserAgents from '../pages/UserAgents'\nimport UserAgentsForm from '../pages/UserAgentsForm'\nimport Texts from '../pages/Texts'\nimport TextsForm from '../pages/TextsForm'\n\nexport default class App extends React.Component {\n\n  render() {\n    return (\n      <Router>\n        <header>\n          <h1>Dirty Little Helper</h1>\n        </header>\n        <main>\n          <Route path=\"/\" component={Home} exact={true} />\n\n          <Route path=\"/settings\" component={Settings} exact={true} />\n\n          <Route path=\"/settings/useragents\" component={UserAgents} exact={true} />\n          <Route path=\"/settings/useragents/add\" component={UserAgentsForm} exact={true} />\n          <Route path=\"/settings/useragents/show/:id\" component={UserAgentsForm} exact={true} />\n\n          <Route path=\"/settings/texts\" component={Texts} exact={true} />\n          <Route path=\"/settings/texts/add\" component={TextsForm} exact={true} />\n          <Route path=\"/settings/texts/show/:id\" component={TextsForm} exact={true} />\n        </main>\n        <footer>\n          <p className=\"float-left\">\n            <Link to=\"/settings\">Settings</Link>\n            {/* this.props.location.pathname !== '/settings' ? <Link to=\"/settings\">Settings</Link> : <Link to=\"/\">Back</Link> */}\n          </p>\n          <p className=\"float-right\">Version: 2.0.0</p>\n        </footer>\n      </Router>\n    )\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './global/App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n/*\n// Use matchMedia to check the user preference\nconst prefersDark = window.matchMedia('(prefers-color-scheme: dark)')\n// Add or remove the \"dark\" class based on if the media query matches\nlet toggleDarkTheme = (shouldAdd: any) => {\n  document.body.classList.toggle('dark', shouldAdd)\n}\n// Listen for changes to the prefers-color-scheme media query\nprefersDark.addListener((mediaQuery) => toggleDarkTheme(mediaQuery.matches))\n\ntoggleDarkTheme(prefersDark.matches)\n*/\n"],"sourceRoot":""}