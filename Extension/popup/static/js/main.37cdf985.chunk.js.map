{"version":3,"sources":["services/Storage.ts","services/DeviceService.ts","pages/Home.tsx","pages/Settings.tsx","pages/DeviceManager.tsx","services/TextService.ts","pages/Texts.tsx","pages/TextsForm.tsx","services/UserAgentGroupService.ts","pages/UserAgentGroups.tsx","services/UserAgentService.ts","pages/UserAgentGroupsForm.tsx","pages/UserAgents.tsx","pages/UserAgentsForm.tsx","global/App.tsx","index.tsx"],"names":["storage","window","localStorage","set","key","value","Promise","resolve","reject","setItem","JSON","stringify","err","get","item","getItem","parse","undefined","DeviceService","devices","storageKey","this","length","id","find","device","Math","max","map","parseInt","push","toString","name","content","save","index","indexOf","splice","Home","state","load","setState","chrome","tabs","query","active","currentWindow","sendMessage","function","func","selector","attribute","userAgent","openPopupWindow","width","height","url","className","onClick","toggleGridOverlay","toggleOutlines","group","groupIndex","userAgents","deviceIndex","openBrowser","React","Component","Settings","to","DeviceManager","delete","TextService","texts","text","Texts","TextsForm","props","handleSubmit","bind","handleChange","params","match","event","target","create","update","preventDefault","history","onSubmit","htmlFor","type","onChange","UserAgentGroupService","userAgentGroups","userAgentGroup","UserAgentGroups","UserAgentService","UserAgentGroupsForm","console","log","multiple","UserAgents","UserAgentsForm","App","path","component","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.37cdf985.chunk.js","sourcesContent":["const storage = window.localStorage;\n\nexport function set(key: string, value: any): Promise<void> {\n  return new Promise((resolve, reject) => {\n    try {\n      storage && storage.setItem(key, JSON.stringify(value))\n      resolve()\n    } catch (err) {\n      reject(`Couldn't store object ${err}`)\n    }\n  })\n}\n\nexport function remove(key: string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    try {\n      storage && storage.removeItem(key)\n      resolve()\n    } catch (err) {\n      reject(`Couldn't remove object ${err}`)\n    }\n  })\n}\n\nexport function get(key: string): Promise<any> {\n  return new Promise((resolve, reject) => {\n    try {\n      if (storage) {\n        const item = storage.getItem(key)\n        if (item != null) {\n          resolve(JSON.parse(item))\n        }\n      }\n      resolve(undefined)\n    } catch (err) {\n      reject(`Couldn't get object: ${err}`)\n    }\n  })\n}\n","import { get, set } from './Storage'\n\nclass DeviceServiceController {\n\n  public devices: any[] = []\n  private storageKey: string = 'devices'\n\n  async load(): Promise<any[]> {\n    if (this.devices.length > 0) {\n      return this.devices\n    } else {\n      this.devices = (await get(this.storageKey)) || []\n      return this.devices\n    }\n  }\n\n  async save(): Promise<void> {\n    return await set(this.storageKey, this.devices)\n  }\n\n  get(id: any): any {\n    return this.devices.find(device => device.id === id) as any\n  }\n\n  create(device: any): void {\n    // Create a unique id that is one larger than the current largest id\n    let id = Math.max(...this.devices.map(device => parseInt(device.id)), 0) + 1\n    this.devices.push({\n      id: id.toString(), name: device.name, content: device.content\n    })\n    this.save()\n  }\n\n  update(id: any, device: any): void {\n    // Get the index in the array of the device that was passed in\n    let index = this.devices.indexOf(this.get(id))\n    this.devices[index] = device\n    this.save()\n  }\n\n  delete(device: any): void {\n    // Get the index in the array of the device that was passed in\n    let index = this.devices.indexOf(device)\n    // Delete that element of the array and resave the data\n    if (index > -1) {\n      this.devices.splice(index, 1)\n      this.save()\n    }\n  }\n}\n\nexport const DeviceService = new DeviceServiceController()\n","/*global chrome*/\n\nimport React from 'react'\nimport { Link } from \"react-router-dom\";\nimport { UserAgent } from \"../interfaces/UserAgent\";\nimport { DeviceService } from \"../services/DeviceService\";\n\nexport default class Home extends React.Component {\n\n  state = {\n    devices: []\n  }\n\n  async componentDidMount() {\n    this.setState({\n      devices: [...(await DeviceService.load())]\n    })\n  }\n\n  toggleGridOverlay() {\n    // @ts-ignore\n    chrome.tabs.query({\n      active: true, currentWindow: true, // @ts-ignore\n    }, (tabs) => {\n      // @ts-ignore\n      chrome.tabs.sendMessage(tabs[0].id, {\n        function: 'toggleGridOverlay',\n      })\n    })\n  }\n\n  toggleOutlines(func: string, selector: string, attribute: string) {\n    // @ts-ignore\n    chrome.tabs.query({\n      active: true,\n      currentWindow: true\n      // @ts-ignore\n    }, (tabs) => {\n      // @ts-ignore\n      chrome.tabs.sendMessage(tabs[0].id, {\n        function: func, selector: selector, attribute: attribute,\n      })\n    })\n  }\n\n  openBrowser(userAgent: any) {\n    // @ts-ignore\n    chrome.tabs.query({\n      active: !0,\n      currentWindow: !0,\n      // @ts-ignore\n    }, (tabs) => {\n      // @ts-ignore\n      openPopupWindow(userAgent.width, userAgent.height, tabs[0].url, userAgent.userAgent)\n    })\n  }\n\n  render() {\n    return (\n      <>\n        <section>\n          <h2 className=\"title\">Tools</h2>\n          <ul>\n            <li>\n              Grid Overlay\n              <div className=\"float-right\">\n                <button onClick={this.toggleGridOverlay}>Toggle</button>\n              </div>\n            </li>\n            <li>\n              Outline Headings\n              <div className=\"float-right\">\n                <button onClick={() => this.toggleOutlines('outlineHeadings', '', '')}>Toggle</button>\n              </div>\n            </li>\n            <li>\n              Image Alternative Attributes\n              <div className=\"float-right\">\n                <button onClick={() => this.toggleOutlines('outlineElementAttribute', 'img', 'alt')}>Toggle</button>\n              </div>\n            </li>\n            <li>\n              Anchor Title Attributes\n              <div className=\"float-right\">\n                <button onClick={() => this.toggleOutlines('outlineElementAttribute', 'a', 'title')}>Toggle</button>\n              </div>\n            </li>\n            <li>\n              Button Title Attributes\n              <div className=\"float-right\">\n                <button onClick={() => this.toggleOutlines('outlineElementAttribute', 'button', 'title')}>Toggle</button>\n              </div>\n            </li>\n          </ul>\n        </section>\n        <section>\n          <h2 className=\"title\">Devices</h2>\n          {this.state.devices.length > 0 ? (\n            <ul>{this.state.devices.map((group: any, groupIndex: number) => {\n              return (\n                <li key={groupIndex}>\n                  <h3>{group.name}</h3>\n                  {group.userAgents.length > 0 ? (\n                    <ul className=\"simulate-device-list\">{group.userAgents.map((device: any, deviceIndex: number) => {\n                      return (\n                        <li key={deviceIndex} className=\"simulate-device-list-item\">\n                          <button onClick={() => this.openBrowser(device)}>{device.name}<br/>({device.width}x{device.height})</button>\n                        </li>\n                      )\n                    })}</ul>\n                  ) : null}\n                </li>\n              )\n            })}</ul>\n          ) : null}\n        </section>\n      </>\n    )\n  }\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport default class Settings extends React.Component {\n\n  render() {\n    return (<>\n        <h2>\n          Settings\n          <div className=\"float-right\">\n            <Link to=\"/\">\n              <button>←</button>\n            </Link>\n          </div>\n        </h2>\n        <section>\n          <h2 className=\"title\">Device Manager</h2>\n          <p>Manage devices for simulating your web contents.</p>\n          <div className=\"float-right\">\n            <Link to=\"/settings/devicemanager\">\n              <button>Manage</button>\n            </Link>\n          </div>\n          <div className=\"clearfix\"/>\n        </section>\n        <section>\n          <h2 className=\"title\">User Agent Groups</h2>\n          <p>Manage groups for simulating your web contents.</p>\n          <div className=\"float-right\">\n            <Link to=\"/settings/useragentgroups\">\n              <button>Manage</button>\n            </Link>\n          </div>\n          <div className=\"clearfix\"/>\n        </section>\n        <section>\n          <h2 className=\"title\">User Agents</h2>\n          <p>Manage devices for simulating your web contents.</p>\n          <div className=\"float-right\">\n            <Link to=\"/settings/useragents\">\n              <button>Manage</button>\n            </Link>\n          </div>\n          <div className=\"clearfix\"/>\n        </section>\n        <section>\n          <h2 className=\"title\">Texts</h2>\n          <p>Manage dummy texts for inserting into input fields.</p>\n          <div className=\"float-right\">\n            <Link to=\"/settings/texts\">\n              <button>Manage</button>\n            </Link>\n          </div>\n          <div className=\"clearfix\"/>\n        </section>\n      </>)\n  }\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { DeviceService } from '../services/DeviceService'\n\nexport default class DeviceManager extends React.Component {\n\n  state = {\n    devices: []\n  }\n\n  async componentDidMount() {\n    this.setState({\n      devices: [...(await DeviceService.load())]\n    })\n  }\n\n  delete(device: any) {\n\n  }\n\n  render() {\n    return (\n      <>\n        <h2>\n          Device Manager\n          <div className=\"float-right\">\n            <Link to=\"/settings\">\n              <button>←</button>\n            </Link>\n          </div>\n          <div className=\"clearfix\"/>\n        </h2>\n        <div className=\"scrollable\">\n          {this.state.devices.length > 0 ? (\n            <ul>{this.state.devices.map((group: any, groupIndex: number) => {\n              return (\n                <li key={groupIndex}>\n                  <h3>{group.name}</h3>\n                  {group.userAgents.length > 0 ? (\n                    <ul>{group.userAgents.map((device: any, deviceIndex: number) => {\n                      return (\n                        <li key={deviceIndex}>\n                          <span>{device.name} ({device.width}x{device.height})</span>\n                          <div className=\"float-right\">\n                            <Link to={`/settings/devicemanager/edit/${device.id}`}>\n                              <button>Edit</button>\n                            </Link>\n                            <button onClick={() => this.delete(device)}>Delete</button>\n                          </div>\n                        </li>\n                      )\n                    })}</ul>\n                  ) : null}\n                </li>\n              )\n            })}</ul>\n          ) : null}\n        </div>\n        <Link to=\"/settings/devicemanager/add\">\n          <button>+</button>\n        </Link>\n      </>\n    )\n  }\n}\n","import { Text } from '../interfaces/Text'\nimport { get, set } from './Storage'\n\nclass TextServiceController {\n\n  public texts: Text[] = []\n  private storageKey: string = 'texts'\n\n  async load(): Promise<Text[]> {\n    if (this.texts.length > 0) {\n      return this.texts\n    } else {\n      this.texts = (await get(this.storageKey)) || []\n      return this.texts\n    }\n  }\n\n  async save(): Promise<void> {\n    return await set(this.storageKey, this.texts)\n  }\n\n  get(id: any): Text {\n    return this.texts.find(text => text.id === id) as Text\n  }\n\n  create(text: Text): void {\n    // Create a unique id that is one larger than the current largest id\n    let id = Math.max(...this.texts.map(text => parseInt(text.id)), 0) + 1\n    this.texts.push({\n      id: id.toString(), name: text.name, content: text.content\n    })\n    this.save()\n  }\n\n  update(id: any, text: Text): void {\n    // Get the index in the array of the text that was passed in\n    let index = this.texts.indexOf(this.get(id))\n    this.texts[index] = text\n    this.save()\n  }\n\n  delete(text: Text): void {\n    // Get the index in the array of the text that was passed in\n    let index = this.texts.indexOf(text)\n    // Delete that element of the array and resave the data\n    if (index > -1) {\n      this.texts.splice(index, 1)\n      this.save()\n    }\n  }\n}\n\nexport const TextService = new TextServiceController()\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Text } from \"../interfaces/Text\"\nimport { TextService } from \"../services/TextService\"\n\nexport default class Texts extends React.Component {\n\n  state = {\n    texts: []\n  }\n\n  async componentDidMount() {\n    this.setState({\n      texts: [...(await TextService.load())]\n    })\n  }\n\n  async delete(text: Text) {\n    // @ts-ignore\n    let index = this.state.texts.indexOf(text)\n    if (index > -1) {\n      this.state.texts.splice(index, 1)\n    }\n    await TextService.delete(text)\n    this.setState({\n      texts: [...(await TextService.load())]\n    })\n  }\n\n  render() {\n    return (<>\n        <h2>\n          Texts\n          <div className=\"float-right\">\n            <Link to=\"/settings\">\n              <button>←</button>\n            </Link>\n            <Link to=\"/settings/texts/add\">\n              <button>+</button>\n            </Link>\n          </div>\n          <div className=\"clearfix\"/>\n        </h2>\n        <ul className=\"scrollable\">\n          {this.state.texts.map((text: Text, index: number) => (<li key={index}>\n              <span>{text.name}</span>\n              <div className=\"float-right\">\n                <Link to={`/settings/texts/edit/${text.id}`}>\n                  <button>Edit</button>\n                </Link>\n                <button onClick={() => this.delete(text)}>Delete</button>\n              </div>\n              <div className=\"clearfix\"/>\n            </li>))}\n        </ul>\n      </>)\n  }\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Text } from \"../interfaces/Text\"\nimport { TextService } from \"../services/TextService\"\n\nexport default class TextsForm extends React.Component {\n\n  state = {\n    id: undefined, name: undefined, content: undefined\n  }\n\n  constructor(props: any) {\n    super(props)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  async componentDidMount() {\n    // @ts-ignore\n    const {match: {params}} = this.props\n    if (params.id) {\n      await TextService.load()\n      this.setState({...await TextService.get(params.id)})\n    }\n  }\n\n  handleChange(event: any) {\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n  }\n\n  handleSubmit(event: any) {\n    let text = this.state as unknown as Text\n    if (typeof text.id === 'undefined') {\n      TextService.create(text)\n    } else {\n      TextService.update(text.id, text)\n    }\n    event.preventDefault()\n    // @ts-ignore\n    this.props.history.push(\"/settings/texts\")\n  }\n\n  render() {\n    return (<>\n        <h2>\n          Text\n          <div className=\"float-right\">\n            <Link to=\"/settings/texts\">\n              <button>←</button>\n            </Link>\n          </div>\n        </h2>\n        <form onSubmit={this.handleSubmit}>\n          <div>\n            <label htmlFor=\"name\">Name</label>\n            <input type=\"text\" id=\"name\" name=\"name\" value={this.state.name} onChange={this.handleChange}/>\n          </div>\n          <div>\n            <label htmlFor=\"content\">Content</label>\n            <textarea id=\"content\" name=\"content\" value={this.state.content} onChange={this.handleChange}/>\n          </div>\n          <div className=\"float-right\">\n            <input type=\"submit\" value=\"Submit\"/>\n          </div>\n        </form>\n      </>)\n  }\n}\n","import { UserAgentGroup } from '../interfaces/UserAgentGroup'\nimport { get, set } from './Storage'\n\nclass UserAgentGroupServiceController {\n\n  public userAgentGroups: UserAgentGroup[] = []\n  private storageKey: string = 'userAgentGroups'\n\n  async load(): Promise<UserAgentGroup[]> {\n    if (this.userAgentGroups.length > 0) {\n      return this.userAgentGroups\n    } else {\n      this.userAgentGroups = (await get(this.storageKey)) || []\n      return this.userAgentGroups\n    }\n  }\n\n  async save(): Promise<void> {\n    return await set(this.storageKey, this.userAgentGroups)\n  }\n\n  get(id: any): UserAgentGroup {\n    return this.userAgentGroups.find(userAgentGroup => userAgentGroup.id === id) as UserAgentGroup\n  }\n\n  create(userAgentGroup: UserAgentGroup): void {\n    // Create a unique id that is one larger than the current largest id\n    let id = Math.max(...this.userAgentGroups.map(userAgentGroup => parseInt(userAgentGroup.id)), 0) + 1\n    this.userAgentGroups.push({\n      id: id.toString(), name: userAgentGroup.name, userAgents: userAgentGroup.userAgents\n    })\n    this.save()\n  }\n\n  update(id: any, userAgentGroup: UserAgentGroup): void {\n    // Get the index in the array of the userAgentGroup that was passed in\n    let index = this.userAgentGroups.indexOf(this.get(id))\n    this.userAgentGroups[index] = userAgentGroup\n    this.save()\n  }\n\n  delete(userAgentGroup: UserAgentGroup): void {\n    // Get the index in the array of the userAgentGroup that was passed in\n    let index = this.userAgentGroups.indexOf(userAgentGroup)\n    // Delete that element of the array and resave the data\n    if (index > -1) {\n      this.userAgentGroups.splice(index, 1)\n      this.save()\n    }\n  }\n}\n\nexport const UserAgentGroupService = new UserAgentGroupServiceController()\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { UserAgentGroup } from '../interfaces/UserAgentGroup'\nimport { UserAgentGroupService } from '../services/UserAgentGroupService'\n\nexport default class UserAgentGroups extends React.Component {\n\n  state = {\n    userAgentGroups: []\n  }\n\n  async componentDidMount() {\n    this.setState({\n      userAgentGroups: [...(await UserAgentGroupService.load())]\n    })\n  }\n\n  async delete(userAgentGroup: UserAgentGroup) {\n    // @ts-ignore\n    let index = this.state.userAgentGroups.indexOf(text)\n    if (index > -1) {\n      this.state.userAgentGroups.splice(index, 1)\n    }\n    await UserAgentGroupService.delete(userAgentGroup)\n    this.setState({\n      userAgentGroups: [...(await UserAgentGroupService.load())]\n    })\n  }\n\n  render() {\n    return (<>\n      <h2>\n        UserAgentGroups\n        <div className=\"float-right\">\n          <Link to=\"/settings\">\n            <button>←</button>\n          </Link>\n          <Link to=\"/settings/useragentgroups/add\">\n            <button>+</button>\n          </Link>\n        </div>\n        <div className=\"clearfix\"/>\n      </h2>\n      <ul className=\"scrollable\">\n        {this.state.userAgentGroups.map((userAgentGroup: UserAgentGroup, index: number) => (<li key={index}>\n          <span>{userAgentGroup.name}</span>\n          <div className=\"float-right\">\n            <Link to={`/settings/useragentgroups/edit/${userAgentGroup.id}`}>\n              <button>Edit</button>\n            </Link>\n            <button onClick={() => this.delete(userAgentGroup)}>Delete</button>\n          </div>\n          <div className=\"clearfix\"/>\n        </li>))}\n      </ul>\n    </>)\n  }\n}\n","import { UserAgent } from '../interfaces/UserAgent'\nimport { get, set } from './Storage'\n\nclass UserAgentServiceController {\n\n  public userAgents: UserAgent[] = []\n  private storageKey: string = 'userAgents'\n\n  async load(): Promise<UserAgent[]> {\n    if (this.userAgents.length > 0) {\n      return this.userAgents\n    } else {\n      this.userAgents = (await get(this.storageKey)) || []\n      return this.userAgents\n    }\n  }\n\n  async save(): Promise<void> {\n    return await set(this.storageKey, this.userAgents)\n  }\n\n  get(id: any): UserAgent {\n    return this.userAgents.find(userAgent => userAgent.id === id) as UserAgent\n  }\n\n  create(userAgent: UserAgent): void {\n    // Create a unique id that is one larger than the current largest id\n    let id = Math.max(...this.userAgents.map(userAgent => parseInt(userAgent.id)), 0) + 1\n    this.userAgents.push({\n      id: id.toString(), name: userAgent.name, userAgent: userAgent.userAgent, width: userAgent.width, height: userAgent.height\n    })\n    this.save()\n  }\n\n  update(id: any, userAgent: UserAgent): void {\n    // Get the index in the array of the userAgent that was passed in\n    let index = this.userAgents.indexOf(this.get(id))\n    this.userAgents[index] = userAgent\n    this.save()\n  }\n\n  delete(userAgent: UserAgent): void {\n    // Get the index in the array of the userAgent that was passed in\n    let index = this.userAgents.indexOf(userAgent)\n    // Delete that element of the array and resave the data\n    if (index > -1) {\n      this.userAgents.splice(index, 1)\n      this.save()\n    }\n  }\n}\n\nexport const UserAgentService = new UserAgentServiceController()\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { UserAgent } from '../interfaces/UserAgent'\nimport { UserAgentGroup } from '../interfaces/UserAgentGroup'\nimport { UserAgentService } from '../services/UserAgentService'\nimport { UserAgentGroupService } from '../services/UserAgentGroupService'\n\nexport default class UserAgentGroupsForm extends React.Component {\n\n  userAgents : UserAgent[] = []\n\n  state = {\n    id: undefined, name: undefined, userAgents: undefined\n  }\n\n  constructor(props: any) {\n    super(props)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  async componentDidMount() {\n    // @ts-ignore\n    const {match: {params}} = this.props\n    if (params.id) {\n      await UserAgentGroupService.load()\n      this.setState({...await UserAgentGroupService.get(params.id)})\n    }\n    this.userAgents = [...(await UserAgentService.load())]\n  }\n\n  handleChange(event: any) {\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n  }\n\n  handleSubmit(event: any) {\n    let userAgentGroup = this.state as unknown as UserAgentGroup\n    if (typeof userAgentGroup.id === 'undefined') {\n      UserAgentGroupService.create(userAgentGroup)\n    } else {\n      UserAgentGroupService.update(userAgentGroup.id, userAgentGroup)\n    }\n    event.preventDefault()\n    // @ts-ignore\n    this.props.history.push(\"/settings/useragentgroups\")\n  }\n\n  render() {\n    console.log(this.userAgents)\n    return (<>\n      <h2>\n        User Agent Group\n        <div className=\"float-right\">\n          <Link to=\"/settings/useragentgroups\">\n            <button>←</button>\n          </Link>\n        </div>\n      </h2>\n      <form onSubmit={this.handleSubmit}>\n        <div>\n          <label htmlFor=\"name\">Name</label>\n          <input type=\"text\" id=\"name\" name=\"name\" value={this.state.name} onChange={this.handleChange}/>\n        </div>\n        <div>\n          <label htmlFor=\"userAgents\">User Agents</label>\n          <select id=\"userAgents\" name=\"userAgents\" multiple={true} value={this.state.userAgents} onChange={this.handleChange}>\n            {this.userAgents.map((userAgent: UserAgent, index: number) => (\n              <option value={userAgent.id} key={index}>\n                {userAgent.name}\n              </option>\n            ))}\n          </select>\n        </div>\n        <div className=\"float-right\">\n          <input type=\"submit\" value=\"Submit\"/>\n        </div>\n      </form>\n    </>)\n  }\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { UserAgent } from \"../interfaces/UserAgent\";\nimport { UserAgentService } from \"../services/UserAgentService\";\n\nexport default class UserAgents extends React.Component {\n\n  state = {\n    userAgents: []\n  }\n\n  async componentDidMount() {\n    this.setState({\n      userAgents: [...(await UserAgentService.load())]\n    })\n  }\n\n  async delete(userAgent: UserAgent) {\n    // @ts-ignore\n    let index = this.state.userAgents.indexOf(text)\n    if (index > -1) {\n      this.state.userAgents.splice(index, 1)\n    }\n    await UserAgentService.delete(userAgent)\n    this.setState({\n      userAgents: [...(await UserAgentService.load())]\n    })\n  }\n\n  render() {\n    return (<>\n        <h2>\n          UserAgents\n          <div className=\"float-right\">\n            <Link to=\"/settings\">\n              <button>←</button>\n            </Link>\n            <Link to=\"/settings/useragents/add\">\n              <button>+</button>\n            </Link>\n          </div>\n          <div className=\"clearfix\"/>\n        </h2>\n        <ul className=\"scrollable\">\n          {this.state.userAgents.map((userAgent: UserAgent, index: number) => (<li key={index}>\n              <span>{userAgent.name}</span>\n              <div className=\"float-right\">\n                <Link to={`/settings/useragents/edit/${userAgent.id}`}>\n                  <button>Edit</button>\n                </Link>\n                <button onClick={() => this.delete(userAgent)}>Delete</button>\n              </div>\n              <div className=\"clearfix\"/>\n            </li>))}\n        </ul>\n      </>)\n  }\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { UserAgent } from \"../interfaces/UserAgent\"\nimport { UserAgentService } from \"../services/UserAgentService\"\n\nexport default class UserAgentsForm extends React.Component {\n\n  state = {\n    id: undefined, name: undefined, userAgent: undefined, width: undefined, height: undefined\n  }\n\n  constructor(props: any) {\n    super(props)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  async componentDidMount() {\n    // @ts-ignore\n    const {match: {params}} = this.props\n    if (params.id) {\n      await UserAgentService.load()\n      this.setState({...await UserAgentService.get(params.id)})\n    }\n  }\n\n  handleChange(event: any) {\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n  }\n\n  handleSubmit(event: any) {\n    let userAgent = this.state as unknown as UserAgent\n    if (typeof userAgent.id === 'undefined') {\n      UserAgentService.create(userAgent)\n    } else {\n      UserAgentService.update(userAgent.id, userAgent)\n    }\n    event.preventDefault()\n    // @ts-ignore\n    this.props.history.push(\"/settings/useragents\")\n  }\n\n  render() {\n    return (<>\n        <h2>\n          UserAgent\n          <div className=\"float-right\">\n            <Link to=\"/settings/useragents\">\n              <button>←</button>\n            </Link>\n          </div>\n        </h2>\n        <form onSubmit={this.handleSubmit}>\n          <div>\n            <label htmlFor=\"name\">Name</label>\n            <input type=\"text\" id=\"name\" name=\"name\" value={this.state.name} onChange={this.handleChange}/>\n          </div>\n          <div>\n            <label htmlFor=\"content\">UserAgent</label>\n            <input type=\"text\" id=\"userAgent\" name=\"userAgent\" value={this.state.userAgent} onChange={this.handleChange}/>\n          </div>\n          <div>\n            <label htmlFor=\"name\">Name</label>\n            <input type=\"text\" id=\"name\" name=\"name\" value={this.state.name} onChange={this.handleChange}/>\n          </div>\n          <div>\n            <label htmlFor=\"name\">Width</label>\n            <input type=\"number\" id=\"width\" name=\"width\" value={this.state.width} onChange={this.handleChange}/>\n          </div>\n          <div>\n            <label htmlFor=\"name\">Height</label>\n            <input type=\"number\" id=\"height\" name=\"height\" value={this.state.height} onChange={this.handleChange}/>\n          </div>\n          <div className=\"float-right\">\n            <input type=\"submit\" value=\"Submit\"/>\n          </div>\n        </form>\n      </>)\n  }\n}\n","import React from 'react'\nimport { Link, MemoryRouter as Router, Route } from 'react-router-dom'\nimport Home from '../pages/Home'\nimport Settings from '../pages/Settings'\nimport DeviceManager from '../pages/DeviceManager'\nimport Texts from '../pages/Texts'\nimport TextsForm from '../pages/TextsForm'\nimport UserAgentGroups from '../pages/UserAgentGroups'\nimport UserAgentGroupsForm from '../pages/UserAgentGroupsForm'\nimport UserAgents from '../pages/UserAgents'\nimport UserAgentsForm from '../pages/UserAgentsForm'\nimport './App.css'\n\nexport default class App extends React.Component {\n\n  render() {\n    return (<Router>\n        <header>\n          <h1>Dirty Little Helper</h1>\n        </header>\n        <main>\n          <Route path=\"/\" component={Home} exact={true}/>\n\n          <Route path=\"/settings\" component={Settings} exact={true}/>\n\n          <Route path=\"/settings/devicemanager\" component={DeviceManager} exact={true}/>\n\n          <Route path=\"/settings/useragentgroups\" component={UserAgentGroups} exact={true}/>\n          <Route path=\"/settings/useragentgroups/add\" component={UserAgentGroupsForm} exact={true}/>\n          <Route path=\"/settings/useragentgroups/edit/:id\" component={UserAgentGroupsForm} exact={true}/>\n\n          <Route path=\"/settings/useragents\" component={UserAgents} exact={true}/>\n          <Route path=\"/settings/useragents/add\" component={UserAgentsForm} exact={true}/>\n          <Route path=\"/settings/useragents/edit/:id\" component={UserAgentsForm} exact={true}/>\n\n          <Route path=\"/settings/texts\" component={Texts} exact={true}/>\n          <Route path=\"/settings/texts/add\" component={TextsForm} exact={true}/>\n          <Route path=\"/settings/texts/edit/:id\" component={TextsForm} exact={true}/>\n        </main>\n        <footer>\n          <p className=\"float-left\">\n            <Link to=\"/settings\">Settings</Link>\n            {/* this.props.location.pathname !== '/settings' ? <Link to=\"/settings\">Settings</Link> : <Link to=\"/\">Back</Link> */}\n          </p>\n          <p className=\"float-right\">Version: 2.0.0</p>\n        </footer>\n      </Router>)\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './global/App'\n\nReactDOM.render(<App/>, document.getElementById('root'))\n\n/*\n// Use matchMedia to check the user preference\nconst prefersDark = window.matchMedia('(prefers-color-scheme: dark)')\n// Add or remove the \"dark\" class based on if the media query matches\nlet toggleDarkTheme = (shouldAdd: any) => {\n  document.body.classList.toggle('dark', shouldAdd)\n}\n// Listen for changes to the prefers-color-scheme media query\nprefersDark.addListener((mediaQuery) => toggleDarkTheme(mediaQuery.matches))\n\ntoggleDarkTheme(prefersDark.matches)\n*/\n"],"sourceRoot":""}