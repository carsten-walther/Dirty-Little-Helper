{"version":3,"sources":["components/Footer.tsx","services/Storage.ts","services/ValidatorService.ts","components/Header.tsx","pages/Home.tsx","services/TextService.ts","utilities/Utilities.ts","pages/Texts.tsx","services/DeviceService.ts","pages/Devices.tsx","global/App.tsx","index.tsx"],"names":["Footer","props","state","value","handleChange","bind","event","this","setState","AppBar","position","style","top","bottom","BottomNavigation","showLabels","onChange","BottomNavigationAction","label","icon","Apps","component","React","forwardRef","ref","to","Message","Component","storage","window","localStorage","set","key","Promise","resolve","reject","setItem","JSON","stringify","err","get","item","getItem","parse","undefined","ValidatorService","validators","storageKey","length","id","find","validator","Math","max","map","parseInt","push","toString","name","url","save","index","indexOf","splice","Header","title","backTo","children","Toolbar","Grid","container","justify","IconButton","edge","color","ChevronLeft","Typography","variant","Home","actions","func","toggleGridOverlay","params","toggleOutlines","load","chrome","tabs","query","active","currentWindow","sendMessage","function","selector","attribute","create","List","subheader","backgroundColor","padding","ListSubheader","ListItemText","disableTypography","primary","fontSize","fontWeight","paddingTop","paddingBottom","paddingRight","margin","action","ListItem","button","onClick","validate","Launch","TextService","texts","text","content","cropText","str","chars","substring","openPopupWindow","windowWidth","windowHeight","userAgent","width","height","left","round","screen","windows","type","focused","info","webRequest","onBeforeSendHeaders","addListener","details","i","requestHeaders","urls","windowId","insertCSS","runAt","code","Transition","Slide","direction","Texts","dialogOpen","insertText","openNewDialog","openEditDialog","closeDialog","handleSubmit","handleDelete","target","update","preventDefault","delete","Add","dense","secondary","ListItemSecondaryAction","Edit","confirm","Delete","Dialog","open","onClose","TransitionComponent","keepMounted","noValidate","autoComplete","onSubmit","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","fullWidth","required","multiline","rows","DialogActions","Button","DeviceService","devices","device","Devices","groupDialogOpen","deviceDialogOpen","group","userAgents","openDialog","handleGroupChange","handleGroupSubmit","handleDeviceChange","handleDeviceSubmit","which","forEach","indexGroup","indexDevice","groupIndex","cursor","openGroupBrowser","deleteGroup","deviceIndex","openDeviceBrowser","deleteDevice","ListItemAvatar","Avatar","select","MenuItem","App","path","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.80b2edaf.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { AppBar, BottomNavigation, BottomNavigationAction } from '@material-ui/core'\nimport { Apps, Devices, Message } from '@material-ui/icons'\n\nexport default class Footer extends React.Component {\n\n  state = {\n    value: 0\n  }\n\n  constructor(props: any) {\n    super(props)\n\n    this.state = {\n      value: 0\n    }\n\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  handleChange(event: any, value: any) {\n    this.setState({\n      value: value\n    })\n  }\n\n  render() {\n    return (\n      <AppBar position=\"fixed\" style={{top: 'auto', bottom: 0}}>\n        <BottomNavigation showLabels value={this.state.value} onChange={(event, value) => this.handleChange(event, value)}>\n          <BottomNavigationAction label=\"Tools\" icon={<Apps />} component={React.forwardRef((props, ref) => <Link {...props} to=\"/\"/>)}/>\n          <BottomNavigationAction label=\"Devices\" icon={<Devices />} component={React.forwardRef((props, ref) => <Link {...props} to=\"/devices\"/>)}/>\n          <BottomNavigationAction label=\"Texts\" icon={<Message />} component={React.forwardRef((props, ref) => <Link {...props} to=\"/texts\"/>)}/>\n        </BottomNavigation>\n      </AppBar>\n    )\n  }\n}\n","const storage = window.localStorage;\n\nexport function set(key: string, value: any): Promise<void> {\n  return new Promise((resolve, reject) => {\n    try {\n      storage && storage.setItem(key, JSON.stringify(value))\n      resolve()\n    } catch (err) {\n      reject(`Couldn't store object ${err}`)\n    }\n  })\n}\n\nexport function remove(key: string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    try {\n      storage && storage.removeItem(key)\n      resolve()\n    } catch (err) {\n      reject(`Couldn't remove object ${err}`)\n    }\n  })\n}\n\nexport function get(key: string): Promise<any> {\n  return new Promise((resolve, reject) => {\n    try {\n      if (storage) {\n        const item = storage.getItem(key)\n        if (item != null) {\n          resolve(JSON.parse(item))\n        }\n      }\n      resolve(undefined)\n    } catch (err) {\n      reject(`Couldn't get object: ${err}`)\n    }\n  })\n}\n","import { Validator } from '../interfaces/Validator'\nimport { get, set } from './Storage'\n\nclass ValidatorServiceController {\n\n  public validators: Validator[] = []\n  private storageKey: string = 'validators'\n\n  async load(): Promise<Validator[]> {\n    if (this.validators.length > 0) {\n      return this.validators\n    } else {\n      this.validators = (await get(this.storageKey)) || []\n      return this.validators\n    }\n  }\n\n  async save(): Promise<void> {\n    return await set(this.storageKey, this.validators)\n  }\n\n  get(id: any): Validator {\n    return this.validators.find(validator => validator.id === id) as Validator\n  }\n\n  create(validator: Validator): void {\n    let id = Math.max(...this.validators.map(validator => parseInt(validator.id)), 0) + 1\n    this.validators.push({\n      id: id.toString(),\n      name: validator.name,\n      url: validator.url\n    })\n    this.save()\n  }\n\n  update(id: any, validator: Validator): void {\n    let index = this.validators.indexOf(this.get(id))\n    this.validators[index] = validator\n    this.save()\n  }\n\n  delete(validator: Validator): void {\n    let index = this.validators.indexOf(validator)\n    if (index > -1) {\n      this.validators.splice(index, 1)\n      this.save()\n    }\n  }\n}\n\nexport const ValidatorService = new ValidatorServiceController()\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { AppBar, Toolbar, Grid, Typography, IconButton } from '@material-ui/core'\nimport { ChevronLeft } from '@material-ui/icons'\n\ninterface HeaderProps {\n  title?: string,\n  backTo?: string|null\n  children?: any|null\n}\n\nexport default class Header extends React.Component<HeaderProps> {\n\n  constructor(props: HeaderProps) {\n    super(props)\n\n    props = {\n      title: '',\n      backTo: null,\n      children: null\n    }\n  }\n\n  render() {\n    return (\n      <AppBar position=\"fixed\" style={{ top: 0, bottom: 'auto' }}>\n        <Toolbar>\n          <Grid container justify=\"flex-start\">\n            {this.props.backTo ? (\n              <IconButton edge=\"start\" color=\"inherit\" component={props => <Link {...props} to={this.props.backTo}/>}>\n                <ChevronLeft />\n              </IconButton>\n            ) : null}\n            <Typography variant=\"h6\">\n              {this.props.title}\n            </Typography>\n          </Grid>\n          <Grid container justify=\"flex-end\">\n            {this.props.children ? this.props.children : null}\n          </Grid>\n        </Toolbar>\n      </AppBar>\n    )\n  }\n}\n","/*global chrome*/\n\nimport React from 'react'\nimport { List, ListItem, ListItemText, Typography, ListSubheader } from '@material-ui/core'\nimport { Launch } from '@material-ui/icons'\n\nimport { ValidatorService } from '../services/ValidatorService'\nimport Header from '../components/Header'\n\nexport default class Home extends React.Component {\n\n  actions = [\n    {\n      name: 'Grid Overlay',\n      func: this.toggleGridOverlay,\n      params: []\n    }, {\n      name: 'Outline Headings',\n      func: this.toggleOutlines,\n      params: ['outlineHeadings']\n    }, {\n      name: 'Outline Image Alternative Attributes',\n      func: this.toggleOutlines,\n      params: ['outlineElementAttribute', 'img', 'alt']\n    }, {\n      name: 'Outline Anchor Title Attributes',\n      func: this.toggleOutlines,\n      params: ['outlineElementAttribute', 'a', 'title']\n    }, {\n      name: 'Outline Button Title Attributes',\n      func: this.toggleOutlines,\n      params: ['outlineElementAttribute', 'button', 'title']\n    }\n  ]\n\n  state = {\n    validators: []\n  }\n\n  constructor(props: any) {\n    super(props)\n\n    this.state = {\n      validators: []\n    }\n  }\n\n  async componentDidMount() {\n    this.setState({\n      validators: [...(await ValidatorService.load())]\n    })\n  }\n\n  toggleGridOverlay() {\n    // @ts-ignore\n    chrome.tabs.query({\n      active: true,\n      currentWindow: true\n      // @ts-ignore\n    }, (tabs) => {\n      // @ts-ignore\n      chrome.tabs.sendMessage(tabs[0].id, {\n        function: 'toggleGridOverlay'\n      })\n    })\n  }\n\n  toggleOutlines(params: any) {\n    // @ts-ignore\n    chrome.tabs.query({\n      active: true,\n      currentWindow: true\n      // @ts-ignore\n    }, (tabs) => {\n      // @ts-ignore\n      chrome.tabs.sendMessage(tabs[0].id, {\n        function: params[0],\n        selector: params[1],\n        attribute: params[2]\n      })\n    })\n  }\n\n  validate(url: string) {\n    // @ts-ignore\n    chrome.tabs.query({\n      active: true,\n      currentWindow: true\n      // @ts-ignore\n    }, (tabs) => {\n      // @ts-ignore\n      chrome.tabs.create({ url: url + tabs[0].url })\n    })\n  }\n\n  render() {\n    return (\n      <>\n\n        <Header title=\"Dirty Little Helper\"/>\n\n        <main>\n          <List subheader={<li/>} style={{backgroundColor: 'inherit'}}>\n\n            {this.actions.length > 0 ? (\n              <li style={{backgroundColor: 'inherit'}}>\n                <ul style={{backgroundColor: 'inherit', padding: 0}}>\n                  <ListSubheader style={{backgroundColor: '#ddd'}}>\n                    <ListItemText disableTypography primary={\n                      <Typography style={{fontSize: 18, fontWeight: 'bold'}}>\n                        Tools\n                      </Typography>\n                    } style={{paddingTop: 18, paddingBottom: 18, paddingRight: 48, margin: 0}}/>\n                  </ListSubheader>\n                  <List>\n                    {this.actions.map((action: any, index: number) => (\n                      <ListItem key={index} button onClick={() => action.func(action.params)}>\n                        <ListItemText>{action.name}</ListItemText>\n                      </ListItem>\n                    ))}\n                  </List>\n                </ul>\n              </li>\n            ) : null}\n\n            {this.state.validators.length > 0 ? (\n              <li style={{backgroundColor: 'inherit'}}>\n                <ul style={{backgroundColor: 'inherit', padding: 0}}>\n                  <ListSubheader style={{backgroundColor: '#ddd'}}>\n                    <ListItemText disableTypography primary={\n                      <Typography style={{fontSize: 18, fontWeight: 'bold'}}>\n                        Validators\n                      </Typography>\n                    } style={{paddingTop: 18, paddingBottom: 18, paddingRight: 48, margin: 0}}/>\n                  </ListSubheader>\n                  <List>\n                    {this.state.validators.map((validator: any, index: number) => (\n                      <ListItem key={index} button onClick={() => this.validate(validator.url)}>\n                        <ListItemText>{validator.name}</ListItemText>\n                        <Launch/>\n                      </ListItem>\n                    ))}\n                  </List>\n                </ul>\n              </li>\n            ) : null}\n          </List>\n        </main>\n      </>\n    )\n  }\n}\n","import { Text } from '../interfaces/Text'\nimport { get, set } from './Storage'\n\nclass TextServiceController {\n\n  public texts: Text[] = []\n  private storageKey: string = 'texts'\n\n  async load(): Promise<Text[]> {\n    if (this.texts.length > 0) {\n      return this.texts\n    } else {\n      this.texts = (await get(this.storageKey)) || []\n      return this.texts\n    }\n  }\n\n  async save(): Promise<void> {\n    return await set(this.storageKey, this.texts)\n  }\n\n  get(id: any): Text {\n    return this.texts.find(text => text.id === id) as Text\n  }\n\n  create(text: Text): void {\n    let id = Math.max(...this.texts.map(text => parseInt(text.id)), 0) + 1\n    this.texts.push({\n      id: id.toString(),\n      name: text.name,\n      content: text.content\n    })\n    this.save()\n  }\n\n  update(id: any, text: Text): void {\n    let index = this.texts.indexOf(this.get(id))\n    this.texts[index] = text\n    this.save()\n  }\n\n  delete(text: Text): void {\n    let index = this.texts.indexOf(text)\n    if (index > -1) {\n      this.texts.splice(index, 1)\n      this.save()\n    }\n  }\n}\n\nexport const TextService = new TextServiceController()\n","/*global chrome*/\n\n/**\n * cropText\n *\n * @param str\n * @param chars\n */\nexport function cropText(str: string, chars?: number) {\n  if (!chars) {\n    chars = 30\n  }\n  return str.length > chars ? str.substring(0, chars - 3) + \"...\" : str;\n}\n\n/**\n * openPopupWindow\n *\n * @param windowWidth\n * @param windowHeight\n * @param url\n * @param userAgent\n */\nexport function openPopupWindow(windowWidth: number, windowHeight: number, url: string, userAgent: any) {\n  let width = windowWidth + 10\n  let height = windowHeight + 28\n  let left = Math.round(window.screen.width / 2 - width / 2)\n  let top = Math.round(window.screen.height / 2 - height / 2)\n\n  // @ts-ignore\n  chrome.windows.create({\n    url: url,\n    type: 'popup',\n    width: width,\n    height: height,\n    left: left,\n    top: top,\n    focused: !0,\n    // @ts-ignore\n  }, (info) => {\n    addListener(info, userAgent)\n    // @ts-ignore\n    chrome.tabs.insertCSS(info.tabs[0].id, {\n      runAt: 'document_start',\n      code: '::-webkit-scrollbar{width:9px!important;height:9px!important}::-webkit-scrollbar-button:start:decrement,::-webkit-scrollbar-button:end:increment{height:0;width:0;display:none}::-webkit-scrollbar-track-piece{margin:1px;padding:0;width:6px!important;height:5px!important;background:rgba(255,255,255,0.3)}::-webkit-scrollbar:hover{background:rgba(128,128,128,0.2)}::-webkit-scrollbar-thumb{margin:1px!important;border:2px solid transparent;width:5px!important;background-color:rgba(0,0,0,0.4)!important;z-index:9999;-webkit-border-radius:12px;background-clip:content-box}::-webkit-scrollbar-corner{background:rgba(255,255,255,0.3);border:1px solid transparent}::-webkit-scrollbar-thumb:hover{background-color:rgba(0,0,0,0.8)!important;border:2px solid transparent}::-webkit-scrollbar-thumb:active{background-color:rgba(0,0,0,0.6)!important;border:2px solid transparent}',\n    })\n  })\n}\n\n/**\n * addListener\n *\n * @param info\n * @param userAgent\n */\nexport function addListener(info: any, userAgent: any) {\n  // @ts-ignore\n  chrome.webRequest.onBeforeSendHeaders.addListener((details) => {\n    for (let i = 0; i < details.requestHeaders.length; ++i) {\n      if (details.requestHeaders[i].name === 'User-Agent') {\n        details.requestHeaders[i].value = userAgent\n        break\n      }\n    }\n    return {\n      requestHeaders: details.requestHeaders\n    }\n  }, {\n    urls: ['<all_urls>'],\n    windowId: info.id\n  }, [\n    'blocking',\n    'requestHeaders'\n  ])\n}\n","/*global chrome*/\n\nimport React from 'react'\nimport { IconButton, Button, List, ListItem, ListItemText, ListItemSecondaryAction, Dialog, DialogActions, DialogTitle, DialogContent, DialogContentText, TextField, Slide } from '@material-ui/core'\nimport { Add, Delete, Edit } from '@material-ui/icons'\nimport { TransitionProps } from '@material-ui/core/transitions'\n\nimport { Text } from '../interfaces/Text'\nimport { TextService } from '../services/TextService'\nimport { cropText } from '../utilities/Utilities'\n\nimport Header from '../components/Header'\n\nconst Transition = React.forwardRef(function Transition(props: TransitionProps & { children?: React.ReactElement<any, any> }, ref: React.Ref<unknown>) {\n  return <Slide direction=\"up\" ref={ref} {...props} />\n})\n\nexport default class Texts extends React.Component {\n\n  state = {\n    dialogOpen: false,\n    text: {\n      id: undefined,\n      name: undefined,\n      content: undefined\n    },\n    texts: []\n  }\n\n  constructor(props: any) {\n    super(props)\n\n    this.state = {\n      dialogOpen: false,\n      text: {\n        id: undefined,\n        name: undefined,\n        content: undefined\n      },\n      texts: []\n    }\n\n    this.insertText = this.insertText.bind(this)\n    this.openNewDialog = this.openNewDialog.bind(this)\n    this.openEditDialog = this.openEditDialog.bind(this)\n    this.closeDialog = this.closeDialog.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.handleDelete = this.handleDelete.bind(this)\n  }\n\n  async componentDidMount() {\n    this.setState({\n      texts: [...(await TextService.load())]\n    })\n  }\n\n  insertText(text: Text) {\n    // @ts-ignore\n    chrome.tabs.query({\n      'active': true, 'currentWindow': true\n      // @ts-ignore\n    }, (tabs) => {\n      // @ts-ignore\n      chrome.tabs.sendMessage(tabs[0].id, {\n        function: 'insertText', text: text.content\n      })\n    })\n  }\n\n  openNewDialog() {\n    this.setState({\n      text: {\n        id: undefined,\n        name: undefined,\n        content: undefined\n      },\n      dialogOpen: true\n    })\n  }\n\n  openEditDialog(text: Text) {\n    this.setState({\n      text: text,\n      dialogOpen: true\n    })\n  }\n\n  closeDialog() {\n    this.setState({\n      dialogOpen: false\n    })\n  }\n\n  handleChange(event: any) {\n    this.setState({\n      text: {...this.state.text, [event.target.name]: event.target.value}\n    })\n  }\n\n  async handleSubmit(event: any) {\n    if (typeof this.state.text.id === 'undefined') {\n      TextService.create(this.state.text as unknown as Text)\n    } else {\n      TextService.update(this.state.text.id, this.state.text as unknown as Text)\n    }\n\n    this.setState({\n      texts: [...(await TextService.load())]\n    })\n\n    this.closeDialog()\n\n    event.preventDefault()\n  }\n\n  async handleDelete(text: Text) {\n    let texts = [...(await TextService.load())]\n    let index = texts.indexOf(text)\n\n    if (index > -1) {\n      texts.splice(index, 1)\n    }\n\n    await TextService.delete(text)\n    this.setState({\n      texts: [...(await TextService.load())]\n    })\n  }\n\n  render() {\n    return (\n      <>\n\n        <Header title=\"Dummy Texts\">\n          <IconButton edge=\"end\" color=\"inherit\" onClick={this.openNewDialog}>\n            <Add/>\n          </IconButton>\n        </Header>\n\n        <main>\n          {this.state.texts.length > 0 ? (\n            <List>\n              {this.state.texts.map((text: any, index: number) => (\n                <ListItem key={index} dense button onClick={() => this.insertText(text)} title=\"Insert\">\n                  <ListItemText primary={text.name} secondary={cropText(text.content, 70)} style={{paddingRight: 48}}/>\n                  <ListItemSecondaryAction>\n                    <IconButton edge=\"start\" color=\"inherit\" title=\"Edit Element\" onClick={() => this.openEditDialog(text)}>\n                      <Edit/>\n                    </IconButton>\n                    <IconButton edge=\"end\" color=\"inherit\" title=\"Delete Element\" onClick={() => {if (window.confirm('Are you sure you wish to delete this item?')) this.handleDelete(text)}}>\n                      <Delete/>\n                    </IconButton>\n                  </ListItemSecondaryAction>\n                </ListItem>\n              ))}\n            </List>\n          ) : null}\n        </main>\n\n        <Dialog open={this.state.dialogOpen} onClose={this.closeDialog} TransitionComponent={Transition} keepMounted>\n          <form noValidate autoComplete=\"off\" onSubmit={this.handleSubmit}>\n            <DialogTitle>\n              Text\n            </DialogTitle>\n            <DialogContent>\n              <DialogContentText>\n                Please enter a name and the text, that will be inserted.\n              </DialogContentText>\n              <TextField type=\"text\" label=\"Name\" name=\"name\" value={this.state.text.name || ''} autoFocus fullWidth required onChange={this.handleChange}/>\n              <TextField label=\"Content\" name=\"content\" value={this.state.text.content || ''} autoFocus fullWidth multiline rows={6} required onChange={this.handleChange}/>\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={this.closeDialog} color=\"primary\">\n                Cancel\n              </Button>\n              <Button type=\"submit\" color=\"primary\" autoFocus>\n                Save\n              </Button>\n            </DialogActions>\n          </form>\n        </Dialog>\n\n      </>\n    )\n  }\n}\n","import { get, set } from './Storage'\n\nclass DeviceServiceController {\n\n  public devices: any[] = []\n  private storageKey: string = 'devices'\n\n  async load(): Promise<any[]> {\n    if (this.devices.length > 0) {\n      return this.devices\n    } else {\n      this.devices = (await get(this.storageKey)) || []\n      return this.devices\n    }\n  }\n\n  async save(): Promise<void> {\n    return await set(this.storageKey, this.devices)\n  }\n\n  get(id: any): any {\n    return this.devices.find(device => device.id === id) as any\n  }\n\n  create(device: any): void {\n    let id = Math.max(...this.devices.map(device => parseInt(device.id)), 0) + 1\n    this.devices.push({\n      id: id.toString(), name: device.name, content: device.content\n    })\n    this.save()\n  }\n\n  update(id: any, device: any): void {\n    let index = this.devices.indexOf(this.get(id))\n    this.devices[index] = device\n    this.save()\n  }\n\n  delete(device: any): void {\n    let index = this.devices.indexOf(device)\n    if (index > -1) {\n      this.devices.splice(index, 1)\n      this.save()\n    }\n  }\n}\n\nexport const DeviceService = new DeviceServiceController()\n","/*global chrome*/\n\nimport React from 'react'\nimport { IconButton, Typography, List, ListSubheader, ListItem, ListItemText, ListItemSecondaryAction, Dialog, DialogTitle, DialogContent, DialogContentText, TextField, DialogActions, Button, Slide, Avatar, ListItemAvatar, MenuItem } from '@material-ui/core'\nimport { Edit, Delete, Add } from '@material-ui/icons'\nimport { TransitionProps } from '@material-ui/core/transitions'\n\nimport Header from '../components/Header'\nimport { DeviceService } from '../services/DeviceService'\nimport { cropText, openPopupWindow } from '../utilities/Utilities'\n\nconst Transition = React.forwardRef(function Transition(props: TransitionProps & { children?: React.ReactElement<any, any> }, ref: React.Ref<unknown>) {\n  return <Slide direction=\"up\" ref={ref} {...props} />\n})\n\nexport default class Devices extends React.Component {\n\n  state = {\n    dialogOpen: false,\n    groupDialogOpen: false,\n    deviceDialogOpen: false,\n    group: {\n      id: undefined,\n      name: undefined,\n      userAgents: [],\n    },\n    device: {\n      id: undefined,\n      name: undefined,\n      group: undefined,\n      userAgent: undefined,\n      width: undefined,\n      height: undefined\n    },\n    devices: []\n  }\n\n  constructor(props: any) {\n    super(props)\n\n    this.state = {\n      dialogOpen: false,\n      groupDialogOpen: false,\n      deviceDialogOpen: false,\n      group: {\n        id: undefined,\n        name: undefined,\n        userAgents: [],\n      },\n      device: {\n        id: undefined,\n        name: undefined,\n        group: undefined,\n        userAgent: undefined,\n        width: undefined,\n        height: undefined\n      },\n      devices: []\n    }\n\n    this.openDialog = this.openDialog.bind(this)\n    this.openEditDialog = this.openEditDialog.bind(this)\n    this.closeDialog = this.closeDialog.bind(this)\n\n    this.handleGroupChange = this.handleGroupChange.bind(this)\n    this.handleGroupSubmit = this.handleGroupSubmit.bind(this)\n\n    this.handleDeviceChange = this.handleDeviceChange.bind(this)\n    this.handleDeviceSubmit = this.handleDeviceSubmit.bind(this)\n  }\n\n  async componentDidMount() {\n    this.setState({\n      devices: [...(await DeviceService.load())]\n    })\n  }\n\n  openDialog(which: any) {\n    this.setState({\n      group: {},\n      device: {},\n      [which]: true\n    })\n  }\n\n  openEditDialog(which: any, item: any) {\n    this.setState({\n      group: item,\n      device: item,\n      [which]: true\n    })\n  }\n\n  closeDialog(which: any) {\n    this.setState({\n      [which]: false\n    })\n  }\n\n  handleGroupChange(event: any) {\n    this.setState({\n      group: {...this.state.group, [event.target.name]: event.target.value}\n    })\n  }\n\n  handleDeviceChange(event: any) {\n    this.setState({\n      device: {...this.state.device, [event.target.name]: event.target.value}\n    })\n  }\n\n  async handleGroupSubmit(event: any) {\n\n    if (typeof this.state.group.id === 'undefined') {\n      DeviceService.create(this.state.group)\n    } else {\n      DeviceService.update(this.state.group.id, this.state.group)\n    }\n\n    this.setState({\n      devices: [...(await DeviceService.load())]\n    })\n\n    this.closeDialog('groupDialogOpen')\n    this.closeDialog('dialogOpen')\n\n    event.preventDefault()\n  }\n\n  async handleDeviceSubmit(event: any) {\n\n    let group = await DeviceService.get(this.state.device.group)\n\n    let device = this.state.device\n    delete device.group\n\n    if (group.userAgents) {\n      // @ts-ignore\n      device.id = (Math.max(...group.userAgents.map((device: any) => parseInt(device.id)), 0) + 1).toString()\n    } else {\n      // @ts-ignore\n      device.id = (1).toString()\n      group.userAgents = []\n    }\n\n    group.userAgents.push(device)\n    DeviceService.update(this.state.group.id, this.state.group)\n\n    this.setState({\n      devices: [...(await DeviceService.load())]\n    })\n\n    this.closeDialog('deviceDialogOpen')\n    this.closeDialog('dialogOpen')\n\n    event.preventDefault()\n  }\n\n  openGroupBrowser(group: any) {\n    group.userAgents.forEach((userAgent: any) => {\n      // @ts-ignore\n      chrome.tabs.query({\n        active: true, currentWindow: true\n        // @ts-ignore\n      }, (tabs) => {\n        // @ts-ignore\n        openPopupWindow(userAgent.width, userAgent.height, tabs[0].url, userAgent.userAgent)\n      })\n    })\n  }\n\n  openDeviceBrowser(userAgent: any) {\n    // @ts-ignore\n    chrome.tabs.query({\n      active: true, currentWindow: true\n      // @ts-ignore\n    }, (tabs) => {\n      // @ts-ignore\n      openPopupWindow(userAgent.width, userAgent.height, tabs[0].url, userAgent.userAgent)\n    })\n  }\n\n  async deleteGroup(group: any) {\n    // @ts-ignore\n    let indexGroup = this.state.devices.indexOf(group)\n    // @ts-ignore\n    this.state.devices.splice(indexGroup, 1)\n\n    DeviceService.devices = this.state.devices\n\n    await DeviceService.save()\n    this.setState({\n      devices: [...(await DeviceService.load())]\n    })\n  }\n\n  async deleteDevice(group: any, device: any) {\n    // @ts-ignore\n    let indexGroup = this.state.devices.indexOf(group)\n    // @ts-ignore\n    let indexDevice = this.state.devices[indexGroup].userAgents.indexOf(device)\n    // @ts-ignore\n    this.state.devices[indexGroup].userAgents.splice(indexDevice, 1)\n\n    await DeviceService.save()\n    this.setState({\n      devices: [...(await DeviceService.load())]\n    })\n  }\n\n  render() {\n    return (\n      <>\n\n        <Header title=\"Devices\">\n          <IconButton edge=\"end\" color=\"inherit\" onClick={() => this.openDialog('dialogOpen')}>\n            <Add/>\n          </IconButton>\n        </Header>\n\n        <main>\n          {this.state.devices.length > 0 ? (\n            <List subheader={<li/>} style={{backgroundColor: 'inherit'}}>\n              {this.state.devices.map((group: any, groupIndex: number) => (\n                <li key={`section-${groupIndex}`} style={{backgroundColor: 'inherit'}}>\n                  <ul style={{backgroundColor: 'inherit', padding: 0}}>\n                    <ListSubheader title=\"Open all in Browser\" style={{cursor: 'pointer', backgroundColor: '#ddd'}}>\n                      <ListItemText disableTypography primary={<Typography style={{fontSize: 18, fontWeight: 'bold'}}>{cropText(group.name, 25)}</Typography>} onClick={() => this.openGroupBrowser(group)} style={{paddingTop: 18, paddingBottom: 18, paddingRight: 48, margin: 0}}/>\n                      <ListItemSecondaryAction>\n                        <IconButton color=\"inherit\" title=\"Edit Element\" onClick={() => this.openEditDialog('groupDialogOpen', group)}>\n                          <Edit/>\n                        </IconButton>\n                        <IconButton edge=\"end\" color=\"inherit\" title=\"Delete Element\" onClick={() => {if (window.confirm('Are you sure you wish to delete this group?')) this.deleteGroup(group)}}>\n                          <Delete/>\n                        </IconButton>\n                      </ListItemSecondaryAction>\n                    </ListSubheader>\n                    {group.userAgents?.length > 0 ? (\n                      <List>\n                        {group.userAgents.map((device: any, deviceIndex: number) => (\n                          <ListItem key={deviceIndex} dense button onClick={() => this.openDeviceBrowser(device)} title=\"Open in Browser\">\n                            <ListItemText style={{paddingRight: 48}} primary={device.name} secondary={`Width ${device.width}px Height ${device.height}px`}/>\n                            <ListItemSecondaryAction>\n                              <IconButton color=\"inherit\" title=\"Edit Element\" onClick={() => this.openEditDialog('deviceDialogOpen', device)}>\n                                <Edit/>\n                              </IconButton>\n                              <IconButton edge=\"end\" color=\"inherit\" title=\"Delete Element\" onClick={() => {if (window.confirm('Are you sure you wish to delete this item?')) this.deleteDevice(group, device)}}>\n                                <Delete/>\n                              </IconButton>\n                            </ListItemSecondaryAction>\n                          </ListItem>\n                        ))}\n                      </List>\n                    ) : null}\n                  </ul>\n                </li>))}\n            </List>\n          ) : null}\n        </main>\n\n        <Dialog open={this.state.dialogOpen} onClose={() => this.closeDialog('dialogOpen')} TransitionComponent={Transition} keepMounted>\n          <DialogTitle>\n            Add New Element\n          </DialogTitle>\n          <List>\n            <ListItem autoFocus button onClick={() => this.openDialog('groupDialogOpen')}>\n              <ListItemAvatar>\n                <Avatar>\n                  <Add/>\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText primary=\"Add Group\" />\n            </ListItem>\n            {this.state.devices?.length > 0 ? (\n              <ListItem autoFocus button onClick={() => this.openDialog('deviceDialogOpen')}>\n                <ListItemAvatar>\n                  <Avatar>\n                    <Add/>\n                  </Avatar>\n                </ListItemAvatar>\n                <ListItemText primary=\"Add Device\" />\n              </ListItem>\n            ) : null}\n          </List>\n        </Dialog>\n\n        <Dialog open={this.state.groupDialogOpen} onClose={() => this.closeDialog('groupDialogOpen')} TransitionComponent={Transition} keepMounted>\n          <form noValidate autoComplete=\"off\" onSubmit={this.handleGroupSubmit}>\n            <DialogTitle>\n              Group\n            </DialogTitle>\n            <DialogContent>\n              <DialogContentText>\n                Please enter the name of the group\n              </DialogContentText>\n              <TextField type=\"text\" label=\"Name\" name=\"name\" value={this.state.group.name || ''} autoFocus fullWidth required onChange={this.handleGroupChange}/>\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={() => this.closeDialog('groupDialogOpen')} color=\"primary\">\n                Cancel\n              </Button>\n              <Button type=\"submit\" color=\"primary\" autoFocus>\n                Save\n              </Button>\n            </DialogActions>\n          </form>\n        </Dialog>\n\n        <Dialog open={this.state.deviceDialogOpen} onClose={() => this.closeDialog('deviceDialogOpen')} TransitionComponent={Transition} keepMounted>\n          <form noValidate autoComplete=\"off\" onSubmit={this.handleDeviceSubmit}>\n            <DialogTitle>\n              Device\n            </DialogTitle>\n            <DialogContent>\n              <DialogContentText>\n                Please enter the name, user agent and size of the new device.\n              </DialogContentText>\n              <TextField type=\"text\" label=\"Name\" name=\"name\" value={this.state.device.name || ''} autoFocus fullWidth required onChange={this.handleDeviceChange}/>\n              <TextField select label=\"Group\" name=\"group\" value={this.state.device.group || ''} autoFocus fullWidth required onChange={this.handleDeviceChange}>\n                {this.state.devices.map((group: any) => (\n                  <MenuItem key={group.id} value={group.id}>\n                    {group.name}\n                  </MenuItem>\n                ))}\n              </TextField>\n              <TextField type=\"text\" label=\"UserAgent\" name=\"userAgent\" value={this.state.device.userAgent || ''} autoFocus fullWidth multiline rows={3} required onChange={this.handleDeviceChange}/>\n              <TextField type=\"text\" label=\"Width\" name=\"width\" value={this.state.device.width || ''} autoFocus fullWidth required onChange={this.handleDeviceChange}/>\n              <TextField type=\"text\" label=\"Height\" name=\"height\" value={this.state.device.height || ''} autoFocus fullWidth required onChange={this.handleDeviceChange}/>\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={() => this.closeDialog('deviceDialogOpen')} color=\"primary\">\n                Cancel\n              </Button>\n              <Button type=\"submit\" color=\"primary\" autoFocus>\n                Save\n              </Button>\n            </DialogActions>\n          </form>\n        </Dialog>\n\n      </>\n    )\n  }\n}\n","import React from 'react'\nimport { MemoryRouter as Router, Route } from 'react-router-dom'\nimport Footer from \"../components/Footer\";\n\nimport Home from '../pages/Home'\nimport Texts from '../pages/Texts'\nimport Devices from '../pages/Devices'\n\nexport default class App extends React.Component {\n\n  render() {\n    return (\n      <Router>\n        <Route path=\"/\" component={Home} exact={true}/>\n        <Route path=\"/texts\" component={Texts} exact={true}/>\n        <Route path=\"/devices\" component={Devices} exact={true}/>\n\n        <Footer/>\n\n      </Router>\n    )\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './global/App'\n\nReactDOM.render(<App/>, document.getElementById('root'))\n"],"sourceRoot":""}