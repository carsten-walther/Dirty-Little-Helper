[{"/Users/carsten.walther/Desktop/Dirty-Little-Helper/src/src/index.tsx":"1","/Users/carsten.walther/Desktop/Dirty-Little-Helper/src/src/global/App.tsx":"2","/Users/carsten.walther/Desktop/Dirty-Little-Helper/src/src/pages/Home.tsx":"3","/Users/carsten.walther/Desktop/Dirty-Little-Helper/src/src/pages/Texts.tsx":"4","/Users/carsten.walther/Desktop/Dirty-Little-Helper/src/src/pages/Devices.tsx":"5","/Users/carsten.walther/Desktop/Dirty-Little-Helper/src/src/components/Footer.tsx":"6","/Users/carsten.walther/Desktop/Dirty-Little-Helper/src/src/services/TextService.ts":"7","/Users/carsten.walther/Desktop/Dirty-Little-Helper/src/src/services/ValidatorService.ts":"8","/Users/carsten.walther/Desktop/Dirty-Little-Helper/src/src/services/DeviceService.ts":"9","/Users/carsten.walther/Desktop/Dirty-Little-Helper/src/src/utilities/Utilities.ts":"10","/Users/carsten.walther/Desktop/Dirty-Little-Helper/src/src/components/Header.tsx":"11","/Users/carsten.walther/Desktop/Dirty-Little-Helper/src/src/services/Storage.ts":"12"},{"size":148,"mtime":1610434967104,"results":"13","hashOfConfig":"14"},{"size":1123,"mtime":1610435343900,"results":"15","hashOfConfig":"14"},{"size":6823,"mtime":1610443777972,"results":"16","hashOfConfig":"14"},{"size":5452,"mtime":1610434967106,"results":"17","hashOfConfig":"14"},{"size":12180,"mtime":1610434967106,"results":"18","hashOfConfig":"14"},{"size":1239,"mtime":1610434967103,"results":"19","hashOfConfig":"14"},{"size":1125,"mtime":1610434967107,"results":"20","hashOfConfig":"14"},{"size":1302,"mtime":1610434967108,"results":"21","hashOfConfig":"14"},{"size":1120,"mtime":1610434967107,"results":"22","hashOfConfig":"14"},{"size":2434,"mtime":1610434967108,"results":"23","hashOfConfig":"14"},{"size":1377,"mtime":1610434967104,"results":"24","hashOfConfig":"14"},{"size":904,"mtime":1610434967107,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1nljvdh",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"/Users/carsten.walther/Desktop/Dirty-Little-Helper/src/src/index.tsx",[],["53","54"],"/Users/carsten.walther/Desktop/Dirty-Little-Helper/src/src/global/App.tsx",[],"/Users/carsten.walther/Desktop/Dirty-Little-Helper/src/src/pages/Home.tsx",["55","56","57","58","59"],"/*global chrome*/\n\nimport React from 'react'\nimport { List, ListItem, ListItemText, ListItemSecondaryAction, Typography, ListSubheader, IconButton, Menu, MenuItem } from '@material-ui/core'\nimport { Launch, MoreVert } from '@material-ui/icons'\n\nimport { ValidatorService } from '../services/ValidatorService'\nimport Header from '../components/Header'\n\nexport default class Home extends React.Component {\n\n  actions = [\n    {\n      id: 'toggleGridOverlay',\n      name: 'Grid Overlay',\n      func: this.toggleGridOverlay,\n      params: []\n    }, {\n      id: 'toggleFocus',\n      name: 'Outline Focus',\n      func: this.toggleFocus,\n      params: []\n    }, {\n      id: 'toggleOutlines',\n      name: 'Outline Headings',\n      func: this.toggleOutlines,\n      params: ['outlineHeadings']\n    }, {\n      id: 'toggleOutlines',\n      name: 'Outline Image Alternative Attributes',\n      func: this.toggleOutlines,\n      params: ['outlineElementAttribute', 'img', 'alt']\n    }, {\n      id: 'toggleOutlines',\n      name: 'Outline Anchor Title Attributes',\n      func: this.toggleOutlines,\n      params: ['outlineElementAttribute', 'a', 'title']\n    }, {\n      id: 'toggleOutlines',\n      name: 'Outline Button Title Attributes',\n      func: this.toggleOutlines,\n      params: ['outlineElementAttribute', 'button', 'title']\n    }\n  ]\n\n  columns = [1,2,3,4,5,6,7,8,9,10,11,12]\n\n  state = {\n    validators: [],\n    columnMenuOpen: false,\n    column: 12,\n    anchorEl: null\n  }\n\n  constructor(props: any) {\n    super(props)\n\n    this.state = {\n      validators: [],\n      columnMenuOpen: false,\n      column: 12,\n      anchorEl: null\n    }\n\n    this.toggleMenu = this.toggleMenu.bind(this)\n    this.setColumn = this.setColumn.bind(this)\n  }\n\n  async componentDidMount() {\n    this.setState({\n      validators: [...(await ValidatorService.load())]\n    })\n  }\n\n  toggleGridOverlay(columns: number) {\n    // @ts-ignore\n    chrome.tabs.query({\n      active: true,\n      currentWindow: true\n      // @ts-ignore\n    }, (tabs) => {\n      // @ts-ignore\n      chrome.tabs.sendMessage(tabs[0].id, {\n        function: 'toggleGridOverlay',\n        columns: columns,\n      })\n    })\n  }\n\n  toggleFocus() {\n    // @ts-ignore\n    chrome.tabs.query({\n      active: true,\n      currentWindow: true\n      // @ts-ignore\n    }, (tabs) => {\n      // @ts-ignore\n      chrome.tabs.sendMessage(tabs[0].id, {\n        function: 'toggleFocus'\n      })\n    })\n  }\n\n  toggleOutlines(params: any) {\n    // @ts-ignore\n    chrome.tabs.query({\n      active: true,\n      currentWindow: true\n      // @ts-ignore\n    }, (tabs) => {\n      // @ts-ignore\n      chrome.tabs.sendMessage(tabs[0].id, {\n        function: params[0],\n        selector: params[1],\n        attribute: params[2]\n      })\n    })\n  }\n\n  validate(url: string) {\n    // @ts-ignore\n    chrome.tabs.query({\n      active: true,\n      currentWindow: true\n      // @ts-ignore\n    }, (tabs) => {\n      // @ts-ignore\n      chrome.tabs.create({ url: url + tabs[0].url })\n    })\n  }\n\n  toggleMenu(menu: string, state: boolean) {\n    this.setState({\n      [menu]: state\n    })\n  }\n\n  setColumn(event: any) {\n    this.setState({\n      anchorEl: event.currentTarget\n    })\n    console.log(this.state)\n  }\n\n  render() {\n    // @ts-ignore\n    return (\n      <>\n\n        <Header title=\"Dirty Little Helper\"/>\n\n        <main>\n          <List subheader={<li/>} style={{backgroundColor: 'inherit'}}>\n\n            {this.actions.length > 0 ? (\n              <li style={{backgroundColor: 'inherit'}}>\n                <ul style={{backgroundColor: 'inherit', padding: 0}}>\n                  <ListSubheader style={{backgroundColor: '#ddd'}}>\n                    <ListItemText disableTypography primary={\n                      <Typography style={{fontSize: 16, fontWeight: 'bold'}}>\n                        Tools\n                      </Typography>\n                    } style={{paddingTop: 16, paddingBottom: 16, paddingRight: 48, margin: 0}}/>\n                  </ListSubheader>\n                  <List>\n                    {this.actions.map((action: any, index: number) => (\n                      action.id === 'toggleGridOverlay' ? (\n                        <ListItem key={index} button onClick={() => action.func(action.params)}>\n                          <ListItemText>{action.name}</ListItemText>\n                          {/*}\n                          <ListItemSecondaryAction>\n                            <IconButton aria-label=\"more\" aria-controls=\"column-menu\" aria-haspopup=\"true\" onClick={() => this.toggleMenu('columnMenuOpen', true)}>\n                              <MoreVert />\n                            </IconButton>\n                            <Menu id=\"column-menu\" anchorEl={this.state.anchorEl} keepMounted open={this.state.columnMenuOpen} onClose={() => this.toggleMenu('columnMenuOpen', false)}>\n                              {this.columns.map((column) => (\n                                <MenuItem key={column} selected={column === this.state.column} onClick={() => this.toggleMenu('columnMenuOpen', false)}>\n                                  {column === 1 ? column + ' Column' : column + ' Columns'}\n                                </MenuItem>\n                              ))}\n                            </Menu>\n                          </ListItemSecondaryAction>\n                          {*/}\n                        </ListItem>\n                      ) : (\n                        <ListItem key={index} button onClick={() => action.func(action.params)}>\n                          <ListItemText>{action.name}</ListItemText>\n                        </ListItem>\n                      )\n                    ))}\n                  </List>\n                </ul>\n              </li>\n            ) : null}\n\n            {this.state.validators.length > 0 ? (\n              <li style={{backgroundColor: 'inherit'}}>\n                <ul style={{backgroundColor: 'inherit', padding: 0}}>\n                  <ListSubheader style={{backgroundColor: '#ddd'}}>\n                    <ListItemText disableTypography primary={\n                      <Typography style={{fontSize: 16, fontWeight: 'bold'}}>\n                        Validators\n                      </Typography>\n                    } style={{paddingTop: 16, paddingBottom: 16, paddingRight: 48, margin: 0}}/>\n                  </ListSubheader>\n                  <List>\n                    {this.state.validators.map((validator: any, index: number) => (\n                      <ListItem key={index} button onClick={() => this.validate(validator.url)}>\n                        <ListItemText>{validator.name}</ListItemText>\n                        <Launch/>\n                      </ListItem>\n                    ))}\n                  </List>\n                </ul>\n              </li>\n            ) : null}\n          </List>\n        </main>\n      </>\n    )\n  }\n}\n","/Users/carsten.walther/Desktop/Dirty-Little-Helper/src/src/pages/Texts.tsx",[],"/Users/carsten.walther/Desktop/Dirty-Little-Helper/src/src/pages/Devices.tsx",[],"/Users/carsten.walther/Desktop/Dirty-Little-Helper/src/src/components/Footer.tsx",[],"/Users/carsten.walther/Desktop/Dirty-Little-Helper/src/src/services/TextService.ts",[],"/Users/carsten.walther/Desktop/Dirty-Little-Helper/src/src/services/ValidatorService.ts",[],"/Users/carsten.walther/Desktop/Dirty-Little-Helper/src/src/services/DeviceService.ts",[],"/Users/carsten.walther/Desktop/Dirty-Little-Helper/src/src/utilities/Utilities.ts",[],"/Users/carsten.walther/Desktop/Dirty-Little-Helper/src/src/components/Header.tsx",[],"/Users/carsten.walther/Desktop/Dirty-Little-Helper/src/src/services/Storage.ts",[],["60","61"],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":4,"column":40,"nodeType":"68","messageId":"69","endLine":4,"endColumn":63},{"ruleId":"66","severity":1,"message":"70","line":4,"column":92,"nodeType":"68","messageId":"69","endLine":4,"endColumn":102},{"ruleId":"66","severity":1,"message":"71","line":4,"column":104,"nodeType":"68","messageId":"69","endLine":4,"endColumn":108},{"ruleId":"66","severity":1,"message":"72","line":4,"column":110,"nodeType":"68","messageId":"69","endLine":4,"endColumn":118},{"ruleId":"66","severity":1,"message":"73","line":5,"column":18,"nodeType":"68","messageId":"69","endLine":5,"endColumn":26},{"ruleId":"62","replacedBy":"74"},{"ruleId":"64","replacedBy":"75"},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"@typescript-eslint/no-unused-vars","'ListItemSecondaryAction' is defined but never used.","Identifier","unusedVar","'IconButton' is defined but never used.","'Menu' is defined but never used.","'MenuItem' is defined but never used.","'MoreVert' is defined but never used.",["76"],["77"],"no-global-assign","no-unsafe-negation"]