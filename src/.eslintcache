[{"/Users/carstenwalther/Desktop/dirty-little-helper.git/src/src/index.tsx":"1","/Users/carstenwalther/Desktop/dirty-little-helper.git/src/src/global/App.tsx":"2","/Users/carstenwalther/Desktop/dirty-little-helper.git/src/src/pages/Home.tsx":"3","/Users/carstenwalther/Desktop/dirty-little-helper.git/src/src/services/TextService.ts":"4","/Users/carstenwalther/Desktop/dirty-little-helper.git/src/src/services/Storage.ts":"5","/Users/carstenwalther/Desktop/dirty-little-helper.git/src/src/utilities/Utilities.ts":"6","/Users/carstenwalther/Desktop/dirty-little-helper.git/src/src/components/Footer.tsx":"7","/Users/carstenwalther/Desktop/dirty-little-helper.git/src/src/components/Header.tsx":"8","/Users/carstenwalther/Desktop/dirty-little-helper.git/src/src/pages/Texts.tsx":"9","/Users/carstenwalther/Desktop/dirty-little-helper.git/src/src/pages/Devices.tsx":"10","/Users/carstenwalther/Desktop/dirty-little-helper.git/src/src/services/DeviceService.ts":"11","/Users/carstenwalther/Desktop/dirty-little-helper.git/src/src/interfaces/Text.ts":"12"},{"size":148,"mtime":1608888612641,"results":"13","hashOfConfig":"14"},{"size":505,"mtime":1608916129596,"results":"15","hashOfConfig":"14"},{"size":2387,"mtime":1609004359818,"results":"16","hashOfConfig":"14"},{"size":1125,"mtime":1608914598135,"results":"17","hashOfConfig":"14"},{"size":904,"mtime":1608574899524,"results":"18","hashOfConfig":"14"},{"size":2435,"mtime":1608973744492,"results":"19","hashOfConfig":"14"},{"size":943,"mtime":1609004066653,"results":"20","hashOfConfig":"14"},{"size":1176,"mtime":1609004107929,"results":"21","hashOfConfig":"14"},{"size":5514,"mtime":1608985447970,"results":"22","hashOfConfig":"14"},{"size":7799,"mtime":1609002388843,"results":"23","hashOfConfig":"14"},{"size":1120,"mtime":1608914855961,"results":"24","hashOfConfig":"14"},{"size":72,"mtime":1608574899519,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1vn7uif",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/carstenwalther/Desktop/dirty-little-helper.git/src/src/index.tsx",[],["53","54"],"/Users/carstenwalther/Desktop/dirty-little-helper.git/src/src/global/App.tsx",[],"/Users/carstenwalther/Desktop/dirty-little-helper.git/src/src/pages/Home.tsx",[],"/Users/carstenwalther/Desktop/dirty-little-helper.git/src/src/services/TextService.ts",[],"/Users/carstenwalther/Desktop/dirty-little-helper.git/src/src/services/Storage.ts",[],["55","56"],"/Users/carstenwalther/Desktop/dirty-little-helper.git/src/src/utilities/Utilities.ts",[],"/Users/carstenwalther/Desktop/dirty-little-helper.git/src/src/components/Footer.tsx",[],"/Users/carstenwalther/Desktop/dirty-little-helper.git/src/src/components/Header.tsx",[],"/Users/carstenwalther/Desktop/dirty-little-helper.git/src/src/pages/Texts.tsx",[],"/Users/carstenwalther/Desktop/dirty-little-helper.git/src/src/pages/Devices.tsx",["57"],"/*global chrome*/\n\nimport React from 'react'\nimport { IconButton, Typography, List, ListSubheader, ListItem, ListItemText, ListItemSecondaryAction, Dialog, DialogTitle, DialogContent, DialogContentText, TextField, DialogActions, Button, Slide } from '@material-ui/core'\nimport { Edit, Delete, Add } from '@material-ui/icons'\n\nimport { TransitionProps } from '@material-ui/core/transitions'\n\nimport Header from '../components/Header'\nimport Footer from '../components/Footer'\nimport { DeviceService } from '../services/DeviceService'\nimport { cropText, openPopupWindow } from '../utilities/Utilities'\n\nconst Transition = React.forwardRef(function Transition(props: TransitionProps & { children?: React.ReactElement<any, any> }, ref: React.Ref<unknown>) {\n  return <Slide direction=\"up\" ref={ref} {...props} />\n})\n\nexport default class Devices extends React.Component {\n\n  state = {\n    dialogOpen: false,\n    device: {\n      name: undefined,\n      userAgent: undefined,\n      width: undefined,\n      height: undefined\n    },\n    devices: []\n  }\n\n  constructor(props: any) {\n    super(props)\n\n    this.state = {\n      dialogOpen: false,\n      device: {\n        name: undefined,\n        userAgent: undefined,\n        width: undefined,\n        height: undefined\n      },\n      devices: []\n    }\n\n    this.openNewDialog = this.openNewDialog.bind(this)\n    this.openEditDialog = this.openEditDialog.bind(this)\n    this.closeDialog = this.closeDialog.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n\n  async componentDidMount() {\n    this.setState({\n      devices: [...(await DeviceService.load())]\n    })\n  }\n\n  openNewDialog() {\n    this.setState({\n      device: {},\n      dialogOpen: true\n    })\n  }\n\n  openEditDialog(device: any) {\n    this.setState({\n      device: device,\n      dialogOpen: true\n    })\n  }\n\n  closeDialog() {\n    this.setState({\n      dialogOpen: false\n    })\n  }\n\n  handleChange(event: any) {\n    this.setState({\n      device: {...this.state.device, [event.target.name]: event.target.value}\n    })\n  }\n\n  async handleSubmit(event: any) {\n\n  }\n\n  openGroupBrowser(group: any) {\n    group.userAgents.map((userAgent: any) => {\n      // @ts-ignore\n      chrome.tabs.query({\n        active: true, currentWindow: true\n        // @ts-ignore\n      }, (tabs) => {\n        // @ts-ignore\n        openPopupWindow(userAgent.width, userAgent.height, tabs[0].url, userAgent.userAgent)\n      })\n    })\n  }\n\n  openDeviceBrowser(userAgent: any) {\n    // @ts-ignore\n    chrome.tabs.query({\n      active: true, currentWindow: true\n      // @ts-ignore\n    }, (tabs) => {\n      // @ts-ignore\n      openPopupWindow(userAgent.width, userAgent.height, tabs[0].url, userAgent.userAgent)\n    })\n  }\n\n  async deleteGroup(group: any) {\n    console.log(this.state.devices)\n    // @ts-ignore\n    let indexGroup = this.state.devices.indexOf(group)\n    // @ts-ignore\n    this.state.devices.splice(indexGroup, 1)\n\n    await DeviceService.save()\n    this.setState({\n      devices: [...(await DeviceService.load())]\n    })\n  }\n\n  async deleteDevice(group: any, device: any) {\n    // @ts-ignore\n    let indexGroup = this.state.devices.indexOf(group)\n    // @ts-ignore\n    let indexDevice = this.state.devices[indexGroup].userAgents.indexOf(device)\n    // @ts-ignore\n    this.state.devices[indexGroup].userAgents.splice(indexDevice, 1)\n\n    await DeviceService.save()\n    this.setState({\n      devices: [...(await DeviceService.load())]\n    })\n  }\n\n  render() {\n    return (\n      <>\n\n        <Header title=\"Devices\">\n          <IconButton edge=\"end\" color=\"inherit\" onClick={this.openNewDialog}>\n            <Add/>\n          </IconButton>\n        </Header>\n\n        <main>\n          {this.state.devices.length > 0 ? (\n            <List subheader={<li/>} style={{backgroundColor: 'inherit'}}>\n              {this.state.devices.map((group: any, groupIndex: number) => (\n                <li key={`section-${groupIndex}`} style={{backgroundColor: 'inherit'}}>\n                  <ul style={{backgroundColor: 'inherit', padding: 0}}>\n                    <ListSubheader title=\"Open all in Browser\" style={{cursor: 'pointer', backgroundColor: '#ddd'}}>\n                      <ListItemText disableTypography primary={<Typography style={{fontSize: 18, fontWeight: 'bold'}}>{cropText(group.name, 25)}</Typography>} onClick={() => this.openGroupBrowser(group)} style={{paddingTop: 18, paddingBottom: 18, paddingRight: 48, margin: 0}}/>\n                      <ListItemSecondaryAction>\n                        <IconButton color=\"inherit\" title=\"Edit Element\">\n                          <Edit/>\n                        </IconButton>\n                        <IconButton edge=\"end\" color=\"inherit\" title=\"Delete Element\" onClick={() => {if (window.confirm('Are you sure you wish to delete this group?')) this.deleteGroup(group)}}>\n                          <Delete/>\n                        </IconButton>\n                      </ListItemSecondaryAction>\n                    </ListSubheader>\n                    {group.userAgents.length > 0 ? (\n                      <List>\n                        {group.userAgents.map((device: any, deviceIndex: number) => (\n                          <ListItem key={deviceIndex} dense button onClick={() => this.openDeviceBrowser(device)} title=\"Open in Browser\">\n                            <ListItemText style={{paddingRight: 48}} primary={device.name} secondary={`Width ${device.width}px Height ${device.height}px`}/>\n                            <ListItemSecondaryAction>\n                              <IconButton color=\"inherit\" title=\"Edit Element\" onClick={() => this.openEditDialog(device)}>\n                                <Edit/>\n                              </IconButton>\n                              <IconButton edge=\"end\" color=\"inherit\" title=\"Delete Element\" onClick={() => {if (window.confirm('Are you sure you wish to delete this item?')) this.deleteDevice(group, device)}}>\n                                <Delete/>\n                              </IconButton>\n                            </ListItemSecondaryAction>\n                          </ListItem>\n                        ))}\n                      </List>\n                    ) : null}\n                  </ul>\n                </li>))}\n            </List>\n          ) : null}\n        </main>\n\n        <Footer/>\n\n        <Dialog open={this.state.dialogOpen} onClose={this.closeDialog} TransitionComponent={Transition} keepMounted>\n          <form noValidate autoComplete=\"off\" onSubmit={this.handleSubmit}>\n            <DialogTitle>\n              Device\n            </DialogTitle>\n            <DialogContent>\n              <DialogContentText>\n                Please enter a ...\n              </DialogContentText>\n              <TextField type=\"text\" label=\"Name\" name=\"name\" value={this.state.device.name || ''} autoFocus fullWidth required onChange={this.handleChange}/>\n              <TextField type=\"text\" label=\"UserAgent\" name=\"userAgent\" value={this.state.device.userAgent || ''} autoFocus fullWidth multiline rows={3} required onChange={this.handleChange}/>\n              <TextField type=\"text\" label=\"Width\" name=\"width\" value={this.state.device.width || ''} autoFocus fullWidth required onChange={this.handleChange}/>\n              <TextField type=\"text\" label=\"Height\" name=\"height\" value={this.state.device.height || ''} autoFocus fullWidth required onChange={this.handleChange}/>\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={this.closeDialog} color=\"primary\">\n                Cancel\n              </Button>\n              <Button type=\"submit\" color=\"primary\" autoFocus>\n                Save\n              </Button>\n            </DialogActions>\n          </form>\n        </Dialog>\n\n      </>\n    )\n  }\n}\n","/Users/carstenwalther/Desktop/dirty-little-helper.git/src/src/services/DeviceService.ts",[],"/Users/carstenwalther/Desktop/dirty-little-helper.git/src/src/interfaces/Text.ts",[],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"58","replacedBy":"62"},{"ruleId":"60","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":89,"column":43,"nodeType":"66","messageId":"67","endLine":89,"endColumn":45},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],["68"],["69"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]